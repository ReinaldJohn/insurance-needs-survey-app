/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/autocomplete_func.js":
/*!*******************************************!*\
  !*** ./resources/js/autocomplete_func.js ***!
  \*******************************************/
/***/ (() => {

eval("/*  Google address autocomplete */\nfunction initMap() {\n  var input = document.getElementById('useraddress');\n  var autocomplete = new google.maps.places.Autocomplete(input);\n  autocomplete.addListener('place_changed', function () {\n    var place = autocomplete.getPlace();\n    if (!place.geometry) {\n      window.alert(\"Autocomplete's returned place contains no geometry\");\n      return;\n    }\n    var address = '';\n    if (place.address_components) {\n      address = [place.address_components[0] && place.address_components[0].short_name || '', place.address_components[1] && place.address_components[1].short_name || '', place.address_components[2] && place.address_components[2].short_name || ''].join(' ');\n    }\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJpbml0TWFwIiwiaW5wdXQiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwiYXV0b2NvbXBsZXRlIiwiZ29vZ2xlIiwibWFwcyIsInBsYWNlcyIsIkF1dG9jb21wbGV0ZSIsImFkZExpc3RlbmVyIiwicGxhY2UiLCJnZXRQbGFjZSIsImdlb21ldHJ5Iiwid2luZG93IiwiYWxlcnQiLCJhZGRyZXNzIiwiYWRkcmVzc19jb21wb25lbnRzIiwic2hvcnRfbmFtZSIsImpvaW4iXSwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2pzL2F1dG9jb21wbGV0ZV9mdW5jLmpzPzViZGIiXSwic291cmNlc0NvbnRlbnQiOlsiLyogIEdvb2dsZSBhZGRyZXNzIGF1dG9jb21wbGV0ZSAqL1xyXG5mdW5jdGlvbiBpbml0TWFwKCkge1xyXG5cdCAgdmFyIGlucHV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3VzZXJhZGRyZXNzJyk7XHJcblx0ICB2YXIgYXV0b2NvbXBsZXRlID0gbmV3IGdvb2dsZS5tYXBzLnBsYWNlcy5BdXRvY29tcGxldGUoaW5wdXQpO1xyXG5cdCBcclxuXHQgIGF1dG9jb21wbGV0ZS5hZGRMaXN0ZW5lcigncGxhY2VfY2hhbmdlZCcsIGZ1bmN0aW9uKCkge1xyXG5cdCAgICB2YXIgcGxhY2UgPSBhdXRvY29tcGxldGUuZ2V0UGxhY2UoKTtcclxuXHQgICAgaWYgKCFwbGFjZS5nZW9tZXRyeSkge1xyXG5cdCAgICAgIHdpbmRvdy5hbGVydChcIkF1dG9jb21wbGV0ZSdzIHJldHVybmVkIHBsYWNlIGNvbnRhaW5zIG5vIGdlb21ldHJ5XCIpO1xyXG5cdCAgICAgIHJldHVybjtcclxuXHQgICAgfVxyXG5cclxuXHQgICAgdmFyIGFkZHJlc3MgPSAnJztcclxuXHQgICAgaWYgKHBsYWNlLmFkZHJlc3NfY29tcG9uZW50cykge1xyXG5cdCAgICAgIGFkZHJlc3MgPSBbXHJcblx0ICAgICAgICAocGxhY2UuYWRkcmVzc19jb21wb25lbnRzWzBdICYmIHBsYWNlLmFkZHJlc3NfY29tcG9uZW50c1swXS5zaG9ydF9uYW1lIHx8ICcnKSxcclxuXHQgICAgICAgIChwbGFjZS5hZGRyZXNzX2NvbXBvbmVudHNbMV0gJiYgcGxhY2UuYWRkcmVzc19jb21wb25lbnRzWzFdLnNob3J0X25hbWUgfHwgJycpLFxyXG5cdCAgICAgICAgKHBsYWNlLmFkZHJlc3NfY29tcG9uZW50c1syXSAmJiBwbGFjZS5hZGRyZXNzX2NvbXBvbmVudHNbMl0uc2hvcnRfbmFtZSB8fCAnJylcclxuXHQgICAgICBdLmpvaW4oJyAnKTtcclxuXHQgICAgfSBcclxuXHR9KTtcclxufSJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSxTQUFTQSxPQUFPQSxDQUFBLEVBQUc7RUFDaEIsSUFBSUMsS0FBSyxHQUFHQyxRQUFRLENBQUNDLGNBQWMsQ0FBQyxhQUFhLENBQUM7RUFDbEQsSUFBSUMsWUFBWSxHQUFHLElBQUlDLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDQyxNQUFNLENBQUNDLFlBQVksQ0FBQ1AsS0FBSyxDQUFDO0VBRTdERyxZQUFZLENBQUNLLFdBQVcsQ0FBQyxlQUFlLEVBQUUsWUFBVztJQUNuRCxJQUFJQyxLQUFLLEdBQUdOLFlBQVksQ0FBQ08sUUFBUSxDQUFDLENBQUM7SUFDbkMsSUFBSSxDQUFDRCxLQUFLLENBQUNFLFFBQVEsRUFBRTtNQUNuQkMsTUFBTSxDQUFDQyxLQUFLLENBQUMsb0RBQW9ELENBQUM7TUFDbEU7SUFDRjtJQUVBLElBQUlDLE9BQU8sR0FBRyxFQUFFO0lBQ2hCLElBQUlMLEtBQUssQ0FBQ00sa0JBQWtCLEVBQUU7TUFDNUJELE9BQU8sR0FBRyxDQUNQTCxLQUFLLENBQUNNLGtCQUFrQixDQUFDLENBQUMsQ0FBQyxJQUFJTixLQUFLLENBQUNNLGtCQUFrQixDQUFDLENBQUMsQ0FBQyxDQUFDQyxVQUFVLElBQUksRUFBRSxFQUMzRVAsS0FBSyxDQUFDTSxrQkFBa0IsQ0FBQyxDQUFDLENBQUMsSUFBSU4sS0FBSyxDQUFDTSxrQkFBa0IsQ0FBQyxDQUFDLENBQUMsQ0FBQ0MsVUFBVSxJQUFJLEVBQUUsRUFDM0VQLEtBQUssQ0FBQ00sa0JBQWtCLENBQUMsQ0FBQyxDQUFDLElBQUlOLEtBQUssQ0FBQ00sa0JBQWtCLENBQUMsQ0FBQyxDQUFDLENBQUNDLFVBQVUsSUFBSSxFQUFFLENBQzdFLENBQUNDLElBQUksQ0FBQyxHQUFHLENBQUM7SUFDYjtFQUNKLENBQUMsQ0FBQztBQUNIIiwiaWdub3JlTGlzdCI6W10sImZpbGUiOiIuL3Jlc291cmNlcy9qcy9hdXRvY29tcGxldGVfZnVuYy5qcyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/js/autocomplete_func.js\n");

/***/ }),

/***/ "./resources/js/daterangepicker_func.js":
/*!**********************************************!*\
  !*** ./resources/js/daterangepicker_func.js ***!
  \**********************************************/
/***/ (() => {

eval("jQuery(function ($) {\n  \"use strict\";\n\n  // Date picker range\n  var pickrange = $(\"#dates\");\n  pickrange.daterangepicker({\n    locale: {\n      separator: ' > ',\n      direction: 'ltr',\n      format: 'MM-DD-YY'\n    },\n    parentEl: \"#inline-calendar\",\n    minDate: new Date(),\n    autoUpdateInput: false,\n    linkedCalendars: true,\n    alwaysShowCalendars: true,\n    singleDatePicker: false,\n    autoApply: true,\n    inline: true\n  });\n  pickrange.on('apply.daterangepicker', function (ev, picker) {\n    $(this).val(picker.startDate.format('MM-DD-YY') + ' > ' + picker.endDate.format('MM-DD-YY'));\n  });\n  pickrange.on('cancel.daterangepicker', function (ev, picker) {\n    $(this).val('');\n  });\n\n  // Date picker range disabled days of the week\n  var pickrange_disabled_day = $(\"#dates.days-disabled\");\n  pickrange_disabled_day.daterangepicker({\n    locale: {\n      separator: ' > ',\n      direction: 'ltr',\n      format: 'MM-DD-YY'\n    },\n    isInvalidDate: function isInvalidDate(date) {\n      return date.day() == 0 || date.day() == 6; /*  Sundays(0) and Saturdays(6) disabled */\n    },\n    parentEl: \"#inline-calendar\",\n    minDate: new Date(),\n    autoUpdateInput: false,\n    linkedCalendars: true,\n    alwaysShowCalendars: true,\n    singleDatePicker: false,\n    autoApply: true,\n    inline: true\n  });\n  pickrange_disabled_day.on('apply.daterangepicker', function (ev, picker) {\n    $(this).val(picker.startDate.format('MM-DD-YY') + ' > ' + picker.endDate.format('MM-DD-YY'));\n  });\n  pickrange_disabled_day.on('cancel.daterangepicker', function (ev, picker) {\n    $(this).val('');\n  });\n\n  // Date picker range + translation French + european date format\n  var pickrange_lang = $(\"#dates.lang\");\n  pickrange_lang.daterangepicker({\n    locale: {\n      separator: ' > ',\n      direction: 'ltr',\n      format: 'DD-MM-YY',\n      applyLabel: 'Valider',\n      cancelLabel: 'Annuler',\n      fromLabel: 'De',\n      toLabel: 'à',\n      daysOfWeek: ['Dim', 'Lun', 'Mar', 'Mer', 'Jeu', 'Ven', 'Sam'],\n      monthNames: ['Janvier', 'Février', 'Mars', 'Avril', 'Mai', 'Juin', 'Juillet', 'Août', 'Septembre', 'Octobre', 'Novembre', 'Décembre']\n    },\n    parentEl: \"#inline-calendar\",\n    minDate: new Date(),\n    autoUpdateInput: false,\n    linkedCalendars: true,\n    alwaysShowCalendars: true,\n    singleDatePicker: false,\n    autoApply: true,\n    inline: true\n  });\n  pickrange_lang.on('apply.daterangepicker', function (ev, picker) {\n    $(this).val(picker.startDate.format('DD-MM-YY') + ' > ' + picker.endDate.format('DD-MM-YY'));\n  });\n  pickrange_lang.on('cancel.daterangepicker', function (ev, picker) {\n    $(this).val('');\n  });\n\n  // Date picker single\n  var picksingle = $(\"#dates.single\");\n  $('#dates.single').daterangepicker({\n    locale: {\n      direction: 'ltr',\n      format: 'MM-DD-YY'\n    },\n    parentEl: \"#inline-calendar\",\n    minDate: new Date(),\n    autoUpdateInput: false,\n    linkedCalendars: false,\n    alwaysShowCalendars: true,\n    singleDatePicker: true,\n    autoApply: true,\n    inline: true\n  });\n  picksingle.on('apply.daterangepicker', function (ev, picker) {\n    $(this).val(picker.startDate.format('MM-DD-YY'));\n  });\n  picksingle.on('cancel.daterangepicker', function (ev, picker) {\n    $(this).val('');\n  });\n\n  // Date picker single disabled specific dates\n  var picksingle_dates_disabled = $(\"#dates.single-dates-disabled\");\n  picksingle_dates_disabled.daterangepicker({\n    locale: {\n      direction: 'ltr',\n      format: 'MM-DD-YY'\n    },\n    isInvalidDate: function isInvalidDate(date) {\n      var formatted = date.format('MM-DD-YY');\n      return [\"10-28-21\", \"10-29-21\", \"11-28-21\", \"11-29-21\", \"12-28-21\", \"12-29-21\"].indexOf(formatted) > -1;\n    },\n    parentEl: \"#inline-calendar\",\n    minDate: new Date(),\n    autoUpdateInput: false,\n    linkedCalendars: false,\n    alwaysShowCalendars: true,\n    singleDatePicker: true,\n    autoApply: true,\n    inline: true\n  });\n  picksingle_dates_disabled.on('apply.daterangepicker', function (ev, picker) {\n    $(this).val(picker.startDate.format('MM-DD-YY'));\n  });\n  picksingle_dates_disabled.on('cancel.daterangepicker', function (ev, picker) {\n    $(this).val('');\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/daterangepicker_func.js\n");

/***/ }),

/***/ "./resources/js/owl-carousel.js":
/*!**************************************!*\
  !*** ./resources/js/owl-carousel.js ***!
  \**************************************/
/***/ (() => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n/**\r\n * Owl Carousel v2.2.0\r\n * Copyright 2013-2016 David Deutsch\r\n * Licensed under MIT (https://github.com/OwlCarousel2/OwlCarousel2/blob/master/LICENSE)\r\n */\n/**\r\n * Owl carousel\r\n * @version 2.1.6\r\n * @author Bartosz Wojciechowski\r\n * @author David Deutsch\r\n * @license The MIT License (MIT)\r\n * @todo Lazy Load Icon\r\n * @todo prevent animationend bubling\r\n * @todo itemsScaleUp\r\n * @todo Test Zepto\r\n * @todo stagePadding calculate wrong active classes\r\n */\n;\n(function ($, window, document, undefined) {\n  /**\r\n   * Creates a carousel.\r\n   * @class The Owl Carousel.\r\n   * @public\r\n   * @param {HTMLElement|jQuery} element - The element to create the carousel for.\r\n   * @param {Object} [options] - The options\r\n   */\n  function Owl(element, options) {\n    /**\r\n     * Current settings for the carousel.\r\n     * @public\r\n     */\n    this.settings = null;\n\n    /**\r\n     * Current options set by the caller including defaults.\r\n     * @public\r\n     */\n    this.options = $.extend({}, Owl.Defaults, options);\n\n    /**\r\n     * Plugin element.\r\n     * @public\r\n     */\n    this.$element = $(element);\n\n    /**\r\n     * Proxied event handlers.\r\n     * @protected\r\n     */\n    this._handlers = {};\n\n    /**\r\n     * References to the running plugins of this carousel.\r\n     * @protected\r\n     */\n    this._plugins = {};\n\n    /**\r\n     * Currently suppressed events to prevent them from beeing retriggered.\r\n     * @protected\r\n     */\n    this._supress = {};\n\n    /**\r\n     * Absolute current position.\r\n     * @protected\r\n     */\n    this._current = null;\n\n    /**\r\n     * Animation speed in milliseconds.\r\n     * @protected\r\n     */\n    this._speed = null;\n\n    /**\r\n     * Coordinates of all items in pixel.\r\n     * @todo The name of this member is missleading.\r\n     * @protected\r\n     */\n    this._coordinates = [];\n\n    /**\r\n     * Current breakpoint.\r\n     * @todo Real media queries would be nice.\r\n     * @protected\r\n     */\n    this._breakpoint = null;\n\n    /**\r\n     * Current width of the plugin element.\r\n     */\n    this._width = null;\n\n    /**\r\n     * All real items.\r\n     * @protected\r\n     */\n    this._items = [];\n\n    /**\r\n     * All cloned items.\r\n     * @protected\r\n     */\n    this._clones = [];\n\n    /**\r\n     * Merge values of all items.\r\n     * @todo Maybe this could be part of a plugin.\r\n     * @protected\r\n     */\n    this._mergers = [];\n\n    /**\r\n     * Widths of all items.\r\n     */\n    this._widths = [];\n\n    /**\r\n     * Invalidated parts within the update process.\r\n     * @protected\r\n     */\n    this._invalidated = {};\n\n    /**\r\n     * Ordered list of workers for the update process.\r\n     * @protected\r\n     */\n    this._pipe = [];\n\n    /**\r\n     * Current state information for the drag operation.\r\n     * @todo #261\r\n     * @protected\r\n     */\n    this._drag = {\n      time: null,\n      target: null,\n      pointer: null,\n      stage: {\n        start: null,\n        current: null\n      },\n      direction: null\n    };\n\n    /**\r\n     * Current state information and their tags.\r\n     * @type {Object}\r\n     * @protected\r\n     */\n    this._states = {\n      current: {},\n      tags: {\n        'initializing': ['busy'],\n        'animating': ['busy'],\n        'dragging': ['interacting']\n      }\n    };\n    $.each(['onResize', 'onThrottledResize'], $.proxy(function (i, handler) {\n      this._handlers[handler] = $.proxy(this[handler], this);\n    }, this));\n    $.each(Owl.Plugins, $.proxy(function (key, plugin) {\n      this._plugins[key.charAt(0).toLowerCase() + key.slice(1)] = new plugin(this);\n    }, this));\n    $.each(Owl.Workers, $.proxy(function (priority, worker) {\n      this._pipe.push({\n        'filter': worker.filter,\n        'run': $.proxy(worker.run, this)\n      });\n    }, this));\n    this.setup();\n    this.initialize();\n  }\n\n  /**\r\n   * Default options for the carousel.\r\n   * @public\r\n   */\n  Owl.Defaults = {\n    items: 3,\n    loop: false,\n    center: false,\n    rewind: false,\n    mouseDrag: true,\n    touchDrag: true,\n    pullDrag: true,\n    freeDrag: false,\n    margin: 0,\n    stagePadding: 0,\n    merge: false,\n    mergeFit: true,\n    autoWidth: false,\n    startPosition: 0,\n    rtl: false,\n    smartSpeed: 250,\n    fluidSpeed: false,\n    dragEndSpeed: false,\n    responsive: {},\n    responsiveRefreshRate: 200,\n    responsiveBaseElement: window,\n    fallbackEasing: 'swing',\n    info: false,\n    nestedItemSelector: false,\n    itemElement: 'div',\n    stageElement: 'div',\n    refreshClass: 'owl-refresh',\n    loadedClass: 'owl-loaded',\n    loadingClass: 'owl-loading',\n    rtlClass: 'owl-rtl',\n    responsiveClass: 'owl-responsive',\n    dragClass: 'owl-drag',\n    itemClass: 'owl-item',\n    stageClass: 'owl-stage',\n    stageOuterClass: 'owl-stage-outer',\n    grabClass: 'owl-grab'\n  };\n\n  /**\r\n   * Enumeration for width.\r\n   * @public\r\n   * @readonly\r\n   * @enum {String}\r\n   */\n  Owl.Width = {\n    Default: 'default',\n    Inner: 'inner',\n    Outer: 'outer'\n  };\n\n  /**\r\n   * Enumeration for types.\r\n   * @public\r\n   * @readonly\r\n   * @enum {String}\r\n   */\n  Owl.Type = {\n    Event: 'event',\n    State: 'state'\n  };\n\n  /**\r\n   * Contains all registered plugins.\r\n   * @public\r\n   */\n  Owl.Plugins = {};\n\n  /**\r\n   * List of workers involved in the update process.\r\n   */\n  Owl.Workers = [{\n    filter: ['width', 'settings'],\n    run: function run() {\n      this._width = this.$element.width();\n    }\n  }, {\n    filter: ['width', 'items', 'settings'],\n    run: function run(cache) {\n      cache.current = this._items && this._items[this.relative(this._current)];\n    }\n  }, {\n    filter: ['items', 'settings'],\n    run: function run() {\n      this.$stage.children('.cloned').remove();\n    }\n  }, {\n    filter: ['width', 'items', 'settings'],\n    run: function run(cache) {\n      var margin = this.settings.margin || '',\n        grid = !this.settings.autoWidth,\n        rtl = this.settings.rtl,\n        css = {\n          'width': 'auto',\n          'margin-left': rtl ? margin : '',\n          'margin-right': rtl ? '' : margin\n        };\n      !grid && this.$stage.children().css(css);\n      cache.css = css;\n    }\n  }, {\n    filter: ['width', 'items', 'settings'],\n    run: function run(cache) {\n      var width = (this.width() / this.settings.items).toFixed(3) - this.settings.margin,\n        merge = null,\n        iterator = this._items.length,\n        grid = !this.settings.autoWidth,\n        widths = [];\n      cache.items = {\n        merge: false,\n        width: width\n      };\n      while (iterator--) {\n        merge = this._mergers[iterator];\n        merge = this.settings.mergeFit && Math.min(merge, this.settings.items) || merge;\n        cache.items.merge = merge > 1 || cache.items.merge;\n        widths[iterator] = !grid ? this._items[iterator].width() : width * merge;\n      }\n      this._widths = widths;\n    }\n  }, {\n    filter: ['items', 'settings'],\n    run: function run() {\n      var clones = [],\n        items = this._items,\n        settings = this.settings,\n        view = Math.max(settings.items * 2, 4),\n        size = Math.ceil(items.length / 2) * 2,\n        repeat = settings.loop && items.length ? settings.rewind ? view : Math.max(view, size) : 0,\n        append = '',\n        prepend = '';\n      repeat /= 2;\n      while (repeat--) {\n        clones.push(this.normalize(clones.length / 2, true));\n        append = append + items[clones[clones.length - 1]][0].outerHTML;\n        clones.push(this.normalize(items.length - 1 - (clones.length - 1) / 2, true));\n        prepend = items[clones[clones.length - 1]][0].outerHTML + prepend;\n      }\n      this._clones = clones;\n      $(append).addClass('cloned').appendTo(this.$stage);\n      $(prepend).addClass('cloned').prependTo(this.$stage);\n    }\n  }, {\n    filter: ['width', 'items', 'settings'],\n    run: function run() {\n      var rtl = this.settings.rtl ? 1 : -1,\n        size = this._clones.length + this._items.length,\n        iterator = -1,\n        previous = 0,\n        current = 0,\n        coordinates = [];\n      while (++iterator < size) {\n        previous = coordinates[iterator - 1] || 0;\n        current = this._widths[this.relative(iterator)] + this.settings.margin;\n        coordinates.push(previous + current * rtl);\n      }\n      this._coordinates = coordinates;\n    }\n  }, {\n    filter: ['width', 'items', 'settings'],\n    run: function run() {\n      var padding = this.settings.stagePadding,\n        coordinates = this._coordinates,\n        css = {\n          'width': Math.ceil(Math.abs(coordinates[coordinates.length - 1])) + padding * 2,\n          'padding-left': padding || '',\n          'padding-right': padding || ''\n        };\n      this.$stage.css(css);\n    }\n  }, {\n    filter: ['width', 'items', 'settings'],\n    run: function run(cache) {\n      var iterator = this._coordinates.length,\n        grid = !this.settings.autoWidth,\n        items = this.$stage.children();\n      if (grid && cache.items.merge) {\n        while (iterator--) {\n          cache.css.width = this._widths[this.relative(iterator)];\n          items.eq(iterator).css(cache.css);\n        }\n      } else if (grid) {\n        cache.css.width = cache.items.width;\n        items.css(cache.css);\n      }\n    }\n  }, {\n    filter: ['items'],\n    run: function run() {\n      this._coordinates.length < 1 && this.$stage.removeAttr('style');\n    }\n  }, {\n    filter: ['width', 'items', 'settings'],\n    run: function run(cache) {\n      cache.current = cache.current ? this.$stage.children().index(cache.current) : 0;\n      cache.current = Math.max(this.minimum(), Math.min(this.maximum(), cache.current));\n      this.reset(cache.current);\n    }\n  }, {\n    filter: ['position'],\n    run: function run() {\n      this.animate(this.coordinates(this._current));\n    }\n  }, {\n    filter: ['width', 'position', 'items', 'settings'],\n    run: function run() {\n      var rtl = this.settings.rtl ? 1 : -1,\n        padding = this.settings.stagePadding * 2,\n        begin = this.coordinates(this.current()) + padding,\n        end = begin + this.width() * rtl,\n        inner,\n        outer,\n        matches = [],\n        i,\n        n;\n      for (i = 0, n = this._coordinates.length; i < n; i++) {\n        inner = this._coordinates[i - 1] || 0;\n        outer = Math.abs(this._coordinates[i]) + padding * rtl;\n        if (this.op(inner, '<=', begin) && this.op(inner, '>', end) || this.op(outer, '<', begin) && this.op(outer, '>', end)) {\n          matches.push(i);\n        }\n      }\n      this.$stage.children('.active').removeClass('active');\n      this.$stage.children(':eq(' + matches.join('), :eq(') + ')').addClass('active');\n      if (this.settings.center) {\n        this.$stage.children('.center').removeClass('center');\n        this.$stage.children().eq(this.current()).addClass('center');\n      }\n    }\n  }];\n\n  /**\r\n   * Initializes the carousel.\r\n   * @protected\r\n   */\n  Owl.prototype.initialize = function () {\n    this.enter('initializing');\n    this.trigger('initialize');\n    this.$element.toggleClass(this.settings.rtlClass, this.settings.rtl);\n    if (this.settings.autoWidth && !this.is('pre-loading')) {\n      var imgs, nestedSelector, width;\n      imgs = this.$element.find('img');\n      nestedSelector = this.settings.nestedItemSelector ? '.' + this.settings.nestedItemSelector : undefined;\n      width = this.$element.children(nestedSelector).width();\n      if (imgs.length && width <= 0) {\n        this.preloadAutoWidthImages(imgs);\n      }\n    }\n    this.$element.addClass(this.options.loadingClass);\n\n    // create stage\n    this.$stage = $('<' + this.settings.stageElement + ' class=\"' + this.settings.stageClass + '\"/>').wrap('<div class=\"' + this.settings.stageOuterClass + '\"/>');\n\n    // append stage\n    this.$element.append(this.$stage.parent());\n\n    // append content\n    this.replace(this.$element.children().not(this.$stage.parent()));\n\n    // check visibility\n    if (this.$element.is(':visible')) {\n      // update view\n      this.refresh();\n    } else {\n      // invalidate width\n      this.invalidate('width');\n    }\n    this.$element.removeClass(this.options.loadingClass).addClass(this.options.loadedClass);\n\n    // register event handlers\n    this.registerEventHandlers();\n    this.leave('initializing');\n    this.trigger('initialized');\n  };\n\n  /**\r\n   * Setups the current settings.\r\n   * @todo Remove responsive classes. Why should adaptive designs be brought into IE8?\r\n   * @todo Support for media queries by using `matchMedia` would be nice.\r\n   * @public\r\n   */\n  Owl.prototype.setup = function () {\n    var viewport = this.viewport(),\n      overwrites = this.options.responsive,\n      match = -1,\n      settings = null;\n    if (!overwrites) {\n      settings = $.extend({}, this.options);\n    } else {\n      $.each(overwrites, function (breakpoint) {\n        if (breakpoint <= viewport && breakpoint > match) {\n          match = Number(breakpoint);\n        }\n      });\n      settings = $.extend({}, this.options, overwrites[match]);\n      if (typeof settings.stagePadding === 'function') {\n        settings.stagePadding = settings.stagePadding();\n      }\n      delete settings.responsive;\n\n      // responsive class\n      if (settings.responsiveClass) {\n        this.$element.attr('class', this.$element.attr('class').replace(new RegExp('(' + this.options.responsiveClass + '-)\\\\S+\\\\s', 'g'), '$1' + match));\n      }\n    }\n    this.trigger('change', {\n      property: {\n        name: 'settings',\n        value: settings\n      }\n    });\n    this._breakpoint = match;\n    this.settings = settings;\n    this.invalidate('settings');\n    this.trigger('changed', {\n      property: {\n        name: 'settings',\n        value: this.settings\n      }\n    });\n  };\n\n  /**\r\n   * Updates option logic if necessery.\r\n   * @protected\r\n   */\n  Owl.prototype.optionsLogic = function () {\n    if (this.settings.autoWidth) {\n      this.settings.stagePadding = false;\n      this.settings.merge = false;\n    }\n  };\n\n  /**\r\n   * Prepares an item before add.\r\n   * @todo Rename event parameter `content` to `item`.\r\n   * @protected\r\n   * @returns {jQuery|HTMLElement} - The item container.\r\n   */\n  Owl.prototype.prepare = function (item) {\n    var event = this.trigger('prepare', {\n      content: item\n    });\n    if (!event.data) {\n      event.data = $('<' + this.settings.itemElement + '/>').addClass(this.options.itemClass).append(item);\n    }\n    this.trigger('prepared', {\n      content: event.data\n    });\n    return event.data;\n  };\n\n  /**\r\n   * Updates the view.\r\n   * @public\r\n   */\n  Owl.prototype.update = function () {\n    var i = 0,\n      n = this._pipe.length,\n      filter = $.proxy(function (p) {\n        return this[p];\n      }, this._invalidated),\n      cache = {};\n    while (i < n) {\n      if (this._invalidated.all || $.grep(this._pipe[i].filter, filter).length > 0) {\n        this._pipe[i].run(cache);\n      }\n      i++;\n    }\n    this._invalidated = {};\n    !this.is('valid') && this.enter('valid');\n  };\n\n  /**\r\n   * Gets the width of the view.\r\n   * @public\r\n   * @param {Owl.Width} [dimension=Owl.Width.Default] - The dimension to return.\r\n   * @returns {Number} - The width of the view in pixel.\r\n   */\n  Owl.prototype.width = function (dimension) {\n    dimension = dimension || Owl.Width.Default;\n    switch (dimension) {\n      case Owl.Width.Inner:\n      case Owl.Width.Outer:\n        return this._width;\n      default:\n        return this._width - this.settings.stagePadding * 2 + this.settings.margin;\n    }\n  };\n\n  /**\r\n   * Refreshes the carousel primarily for adaptive purposes.\r\n   * @public\r\n   */\n  Owl.prototype.refresh = function () {\n    this.enter('refreshing');\n    this.trigger('refresh');\n    this.setup();\n    this.optionsLogic();\n    this.$element.addClass(this.options.refreshClass);\n    this.update();\n    this.$element.removeClass(this.options.refreshClass);\n    this.leave('refreshing');\n    this.trigger('refreshed');\n  };\n\n  /**\r\n   * Checks window `resize` event.\r\n   * @protected\r\n   */\n  Owl.prototype.onThrottledResize = function () {\n    window.clearTimeout(this.resizeTimer);\n    this.resizeTimer = window.setTimeout(this._handlers.onResize, this.settings.responsiveRefreshRate);\n  };\n\n  /**\r\n   * Checks window `resize` event.\r\n   * @protected\r\n   */\n  Owl.prototype.onResize = function () {\n    if (!this._items.length) {\n      return false;\n    }\n    if (this._width === this.$element.width()) {\n      return false;\n    }\n    if (!this.$element.is(':visible')) {\n      return false;\n    }\n    this.enter('resizing');\n    if (this.trigger('resize').isDefaultPrevented()) {\n      this.leave('resizing');\n      return false;\n    }\n    this.invalidate('width');\n    this.refresh();\n    this.leave('resizing');\n    this.trigger('resized');\n  };\n\n  /**\r\n   * Registers event handlers.\r\n   * @todo Check `msPointerEnabled`\r\n   * @todo #261\r\n   * @protected\r\n   */\n  Owl.prototype.registerEventHandlers = function () {\n    if ($.support.transition) {\n      this.$stage.on($.support.transition.end + '.owl.core', $.proxy(this.onTransitionEnd, this));\n    }\n    if (this.settings.responsive !== false) {\n      this.on(window, 'resize', this._handlers.onThrottledResize);\n    }\n    if (this.settings.mouseDrag) {\n      this.$element.addClass(this.options.dragClass);\n      this.$stage.on('mousedown.owl.core', $.proxy(this.onDragStart, this));\n      this.$stage.on('dragstart.owl.core selectstart.owl.core', function () {\n        return false;\n      });\n    }\n    if (this.settings.touchDrag) {\n      this.$stage.on('touchstart.owl.core', $.proxy(this.onDragStart, this));\n      this.$stage.on('touchcancel.owl.core', $.proxy(this.onDragEnd, this));\n    }\n  };\n\n  /**\r\n   * Handles `touchstart` and `mousedown` events.\r\n   * @todo Horizontal swipe threshold as option\r\n   * @todo #261\r\n   * @protected\r\n   * @param {Event} event - The event arguments.\r\n   */\n  Owl.prototype.onDragStart = function (event) {\n    var stage = null;\n    if (event.which === 3) {\n      return;\n    }\n    if ($.support.transform) {\n      stage = this.$stage.css('transform').replace(/.*\\(|\\)| /g, '').split(',');\n      stage = {\n        x: stage[stage.length === 16 ? 12 : 4],\n        y: stage[stage.length === 16 ? 13 : 5]\n      };\n    } else {\n      stage = this.$stage.position();\n      stage = {\n        x: this.settings.rtl ? stage.left + this.$stage.width() - this.width() + this.settings.margin : stage.left,\n        y: stage.top\n      };\n    }\n    if (this.is('animating')) {\n      $.support.transform ? this.animate(stage.x) : this.$stage.stop();\n      this.invalidate('position');\n    }\n    this.$element.toggleClass(this.options.grabClass, event.type === 'mousedown');\n    this.speed(0);\n    this._drag.time = new Date().getTime();\n    this._drag.target = $(event.target);\n    this._drag.stage.start = stage;\n    this._drag.stage.current = stage;\n    this._drag.pointer = this.pointer(event);\n    $(document).on('mouseup.owl.core touchend.owl.core', $.proxy(this.onDragEnd, this));\n    $(document).one('mousemove.owl.core touchmove.owl.core', $.proxy(function (event) {\n      var delta = this.difference(this._drag.pointer, this.pointer(event));\n      $(document).on('mousemove.owl.core touchmove.owl.core', $.proxy(this.onDragMove, this));\n      if (Math.abs(delta.x) < Math.abs(delta.y) && this.is('valid')) {\n        return;\n      }\n      event.preventDefault();\n      this.enter('dragging');\n      this.trigger('drag');\n    }, this));\n  };\n\n  /**\r\n   * Handles the `touchmove` and `mousemove` events.\r\n   * @todo #261\r\n   * @protected\r\n   * @param {Event} event - The event arguments.\r\n   */\n  Owl.prototype.onDragMove = function (event) {\n    var minimum = null,\n      maximum = null,\n      pull = null,\n      delta = this.difference(this._drag.pointer, this.pointer(event)),\n      stage = this.difference(this._drag.stage.start, delta);\n    if (!this.is('dragging')) {\n      return;\n    }\n    event.preventDefault();\n    if (this.settings.loop) {\n      minimum = this.coordinates(this.minimum());\n      maximum = this.coordinates(this.maximum() + 1) - minimum;\n      stage.x = ((stage.x - minimum) % maximum + maximum) % maximum + minimum;\n    } else {\n      minimum = this.settings.rtl ? this.coordinates(this.maximum()) : this.coordinates(this.minimum());\n      maximum = this.settings.rtl ? this.coordinates(this.minimum()) : this.coordinates(this.maximum());\n      pull = this.settings.pullDrag ? -1 * delta.x / 5 : 0;\n      stage.x = Math.max(Math.min(stage.x, minimum + pull), maximum + pull);\n    }\n    this._drag.stage.current = stage;\n    this.animate(stage.x);\n  };\n\n  /**\r\n   * Handles the `touchend` and `mouseup` events.\r\n   * @todo #261\r\n   * @todo Threshold for click event\r\n   * @protected\r\n   * @param {Event} event - The event arguments.\r\n   */\n  Owl.prototype.onDragEnd = function (event) {\n    var delta = this.difference(this._drag.pointer, this.pointer(event)),\n      stage = this._drag.stage.current,\n      direction = delta.x > 0 ^ this.settings.rtl ? 'left' : 'right';\n    $(document).off('.owl.core');\n    this.$element.removeClass(this.options.grabClass);\n    if (delta.x !== 0 && this.is('dragging') || !this.is('valid')) {\n      this.speed(this.settings.dragEndSpeed || this.settings.smartSpeed);\n      this.current(this.closest(stage.x, delta.x !== 0 ? direction : this._drag.direction));\n      this.invalidate('position');\n      this.update();\n      this._drag.direction = direction;\n      if (Math.abs(delta.x) > 3 || new Date().getTime() - this._drag.time > 300) {\n        this._drag.target.one('click.owl.core', function () {\n          return false;\n        });\n      }\n    }\n    if (!this.is('dragging')) {\n      return;\n    }\n    this.leave('dragging');\n    this.trigger('dragged');\n  };\n\n  /**\r\n   * Gets absolute position of the closest item for a coordinate.\r\n   * @todo Setting `freeDrag` makes `closest` not reusable. See #165.\r\n   * @protected\r\n   * @param {Number} coordinate - The coordinate in pixel.\r\n   * @param {String} direction - The direction to check for the closest item. Ether `left` or `right`.\r\n   * @return {Number} - The absolute position of the closest item.\r\n   */\n  Owl.prototype.closest = function (coordinate, direction) {\n    var position = -1,\n      pull = 30,\n      width = this.width(),\n      coordinates = this.coordinates();\n    if (!this.settings.freeDrag) {\n      // check closest item\n      $.each(coordinates, $.proxy(function (index, value) {\n        // on a left pull, check on current index\n        if (direction === 'left' && coordinate > value - pull && coordinate < value + pull) {\n          position = index;\n          // on a right pull, check on previous index\n          // to do so, subtract width from value and set position = index + 1\n        } else if (direction === 'right' && coordinate > value - width - pull && coordinate < value - width + pull) {\n          position = index + 1;\n        } else if (this.op(coordinate, '<', value) && this.op(coordinate, '>', coordinates[index + 1] || value - width)) {\n          position = direction === 'left' ? index + 1 : index;\n        }\n        return position === -1;\n      }, this));\n    }\n    if (!this.settings.loop) {\n      // non loop boundries\n      if (this.op(coordinate, '>', coordinates[this.minimum()])) {\n        position = coordinate = this.minimum();\n      } else if (this.op(coordinate, '<', coordinates[this.maximum()])) {\n        position = coordinate = this.maximum();\n      }\n    }\n    return position;\n  };\n\n  /**\r\n   * Animates the stage.\r\n   * @todo #270\r\n   * @public\r\n   * @param {Number} coordinate - The coordinate in pixels.\r\n   */\n  Owl.prototype.animate = function (coordinate) {\n    var animate = this.speed() > 0;\n    this.is('animating') && this.onTransitionEnd();\n    if (animate) {\n      this.enter('animating');\n      this.trigger('translate');\n    }\n    if ($.support.transform3d && $.support.transition) {\n      this.$stage.css({\n        transform: 'translate3d(' + coordinate + 'px,0px,0px)',\n        transition: this.speed() / 1000 + 's'\n      });\n    } else if (animate) {\n      this.$stage.animate({\n        left: coordinate + 'px'\n      }, this.speed(), this.settings.fallbackEasing, $.proxy(this.onTransitionEnd, this));\n    } else {\n      this.$stage.css({\n        left: coordinate + 'px'\n      });\n    }\n  };\n\n  /**\r\n   * Checks whether the carousel is in a specific state or not.\r\n   * @param {String} state - The state to check.\r\n   * @returns {Boolean} - The flag which indicates if the carousel is busy.\r\n   */\n  Owl.prototype.is = function (state) {\n    return this._states.current[state] && this._states.current[state] > 0;\n  };\n\n  /**\r\n   * Sets the absolute position of the current item.\r\n   * @public\r\n   * @param {Number} [position] - The new absolute position or nothing to leave it unchanged.\r\n   * @returns {Number} - The absolute position of the current item.\r\n   */\n  Owl.prototype.current = function (position) {\n    if (position === undefined) {\n      return this._current;\n    }\n    if (this._items.length === 0) {\n      return undefined;\n    }\n    position = this.normalize(position);\n    if (this._current !== position) {\n      var event = this.trigger('change', {\n        property: {\n          name: 'position',\n          value: position\n        }\n      });\n      if (event.data !== undefined) {\n        position = this.normalize(event.data);\n      }\n      this._current = position;\n      this.invalidate('position');\n      this.trigger('changed', {\n        property: {\n          name: 'position',\n          value: this._current\n        }\n      });\n    }\n    return this._current;\n  };\n\n  /**\r\n   * Invalidates the given part of the update routine.\r\n   * @param {String} [part] - The part to invalidate.\r\n   * @returns {Array.<String>} - The invalidated parts.\r\n   */\n  Owl.prototype.invalidate = function (part) {\n    if ($.type(part) === 'string') {\n      this._invalidated[part] = true;\n      this.is('valid') && this.leave('valid');\n    }\n    return $.map(this._invalidated, function (v, i) {\n      return i;\n    });\n  };\n\n  /**\r\n   * Resets the absolute position of the current item.\r\n   * @public\r\n   * @param {Number} position - The absolute position of the new item.\r\n   */\n  Owl.prototype.reset = function (position) {\n    position = this.normalize(position);\n    if (position === undefined) {\n      return;\n    }\n    this._speed = 0;\n    this._current = position;\n    this.suppress(['translate', 'translated']);\n    this.animate(this.coordinates(position));\n    this.release(['translate', 'translated']);\n  };\n\n  /**\r\n   * Normalizes an absolute or a relative position of an item.\r\n   * @public\r\n   * @param {Number} position - The absolute or relative position to normalize.\r\n   * @param {Boolean} [relative=false] - Whether the given position is relative or not.\r\n   * @returns {Number} - The normalized position.\r\n   */\n  Owl.prototype.normalize = function (position, relative) {\n    var n = this._items.length,\n      m = relative ? 0 : this._clones.length;\n    if (!this.isNumeric(position) || n < 1) {\n      position = undefined;\n    } else if (position < 0 || position >= n + m) {\n      position = ((position - m / 2) % n + n) % n + m / 2;\n    }\n    return position;\n  };\n\n  /**\r\n   * Converts an absolute position of an item into a relative one.\r\n   * @public\r\n   * @param {Number} position - The absolute position to convert.\r\n   * @returns {Number} - The converted position.\r\n   */\n  Owl.prototype.relative = function (position) {\n    position -= this._clones.length / 2;\n    return this.normalize(position, true);\n  };\n\n  /**\r\n   * Gets the maximum position for the current item.\r\n   * @public\r\n   * @param {Boolean} [relative=false] - Whether to return an absolute position or a relative position.\r\n   * @returns {Number}\r\n   */\n  Owl.prototype.maximum = function (relative) {\n    var settings = this.settings,\n      maximum = this._coordinates.length,\n      iterator,\n      reciprocalItemsWidth,\n      elementWidth;\n    if (settings.loop) {\n      maximum = this._clones.length / 2 + this._items.length - 1;\n    } else if (settings.autoWidth || settings.merge) {\n      iterator = this._items.length;\n      reciprocalItemsWidth = this._items[--iterator].width();\n      elementWidth = this.$element.width();\n      while (iterator--) {\n        reciprocalItemsWidth += this._items[iterator].width() + this.settings.margin;\n        if (reciprocalItemsWidth > elementWidth) {\n          break;\n        }\n      }\n      maximum = iterator + 1;\n    } else if (settings.center) {\n      maximum = this._items.length - 1;\n    } else {\n      maximum = this._items.length - settings.items;\n    }\n    if (relative) {\n      maximum -= this._clones.length / 2;\n    }\n    return Math.max(maximum, 0);\n  };\n\n  /**\r\n   * Gets the minimum position for the current item.\r\n   * @public\r\n   * @param {Boolean} [relative=false] - Whether to return an absolute position or a relative position.\r\n   * @returns {Number}\r\n   */\n  Owl.prototype.minimum = function (relative) {\n    return relative ? 0 : this._clones.length / 2;\n  };\n\n  /**\r\n   * Gets an item at the specified relative position.\r\n   * @public\r\n   * @param {Number} [position] - The relative position of the item.\r\n   * @return {jQuery|Array.<jQuery>} - The item at the given position or all items if no position was given.\r\n   */\n  Owl.prototype.items = function (position) {\n    if (position === undefined) {\n      return this._items.slice();\n    }\n    position = this.normalize(position, true);\n    return this._items[position];\n  };\n\n  /**\r\n   * Gets an item at the specified relative position.\r\n   * @public\r\n   * @param {Number} [position] - The relative position of the item.\r\n   * @return {jQuery|Array.<jQuery>} - The item at the given position or all items if no position was given.\r\n   */\n  Owl.prototype.mergers = function (position) {\n    if (position === undefined) {\n      return this._mergers.slice();\n    }\n    position = this.normalize(position, true);\n    return this._mergers[position];\n  };\n\n  /**\r\n   * Gets the absolute positions of clones for an item.\r\n   * @public\r\n   * @param {Number} [position] - The relative position of the item.\r\n   * @returns {Array.<Number>} - The absolute positions of clones for the item or all if no position was given.\r\n   */\n  Owl.prototype.clones = function (position) {\n    var odd = this._clones.length / 2,\n      even = odd + this._items.length,\n      map = function map(index) {\n        return index % 2 === 0 ? even + index / 2 : odd - (index + 1) / 2;\n      };\n    if (position === undefined) {\n      return $.map(this._clones, function (v, i) {\n        return map(i);\n      });\n    }\n    return $.map(this._clones, function (v, i) {\n      return v === position ? map(i) : null;\n    });\n  };\n\n  /**\r\n   * Sets the current animation speed.\r\n   * @public\r\n   * @param {Number} [speed] - The animation speed in milliseconds or nothing to leave it unchanged.\r\n   * @returns {Number} - The current animation speed in milliseconds.\r\n   */\n  Owl.prototype.speed = function (speed) {\n    if (speed !== undefined) {\n      this._speed = speed;\n    }\n    return this._speed;\n  };\n\n  /**\r\n   * Gets the coordinate of an item.\r\n   * @todo The name of this method is missleanding.\r\n   * @public\r\n   * @param {Number} position - The absolute position of the item within `minimum()` and `maximum()`.\r\n   * @returns {Number|Array.<Number>} - The coordinate of the item in pixel or all coordinates.\r\n   */\n  Owl.prototype.coordinates = function (position) {\n    var multiplier = 1,\n      newPosition = position - 1,\n      coordinate;\n    if (position === undefined) {\n      return $.map(this._coordinates, $.proxy(function (coordinate, index) {\n        return this.coordinates(index);\n      }, this));\n    }\n    if (this.settings.center) {\n      if (this.settings.rtl) {\n        multiplier = -1;\n        newPosition = position + 1;\n      }\n      coordinate = this._coordinates[position];\n      coordinate += (this.width() - coordinate + (this._coordinates[newPosition] || 0)) / 2 * multiplier;\n    } else {\n      coordinate = this._coordinates[newPosition] || 0;\n    }\n    coordinate = Math.ceil(coordinate);\n    return coordinate;\n  };\n\n  /**\r\n   * Calculates the speed for a translation.\r\n   * @protected\r\n   * @param {Number} from - The absolute position of the start item.\r\n   * @param {Number} to - The absolute position of the target item.\r\n   * @param {Number} [factor=undefined] - The time factor in milliseconds.\r\n   * @returns {Number} - The time in milliseconds for the translation.\r\n   */\n  Owl.prototype.duration = function (from, to, factor) {\n    if (factor === 0) {\n      return 0;\n    }\n    return Math.min(Math.max(Math.abs(to - from), 1), 6) * Math.abs(factor || this.settings.smartSpeed);\n  };\n\n  /**\r\n   * Slides to the specified item.\r\n   * @public\r\n   * @param {Number} position - The position of the item.\r\n   * @param {Number} [speed] - The time in milliseconds for the transition.\r\n   */\n  Owl.prototype.to = function (position, speed) {\n    var current = this.current(),\n      revert = null,\n      distance = position - this.relative(current),\n      direction = (distance > 0) - (distance < 0),\n      items = this._items.length,\n      minimum = this.minimum(),\n      maximum = this.maximum();\n    if (this.settings.loop) {\n      if (!this.settings.rewind && Math.abs(distance) > items / 2) {\n        distance += direction * -1 * items;\n      }\n      position = current + distance;\n      revert = ((position - minimum) % items + items) % items + minimum;\n      if (revert !== position && revert - distance <= maximum && revert - distance > 0) {\n        current = revert - distance;\n        position = revert;\n        this.reset(current);\n      }\n    } else if (this.settings.rewind) {\n      maximum += 1;\n      position = (position % maximum + maximum) % maximum;\n    } else {\n      position = Math.max(minimum, Math.min(maximum, position));\n    }\n    this.speed(this.duration(current, position, speed));\n    this.current(position);\n    if (this.$element.is(':visible')) {\n      this.update();\n    }\n  };\n\n  /**\r\n   * Slides to the next item.\r\n   * @public\r\n   * @param {Number} [speed] - The time in milliseconds for the transition.\r\n   */\n  Owl.prototype.next = function (speed) {\n    speed = speed || false;\n    this.to(this.relative(this.current()) + 1, speed);\n  };\n\n  /**\r\n   * Slides to the previous item.\r\n   * @public\r\n   * @param {Number} [speed] - The time in milliseconds for the transition.\r\n   */\n  Owl.prototype.prev = function (speed) {\n    speed = speed || false;\n    this.to(this.relative(this.current()) - 1, speed);\n  };\n\n  /**\r\n   * Handles the end of an animation.\r\n   * @protected\r\n   * @param {Event} event - The event arguments.\r\n   */\n  Owl.prototype.onTransitionEnd = function (event) {\n    // if css2 animation then event object is undefined\n    if (event !== undefined) {\n      event.stopPropagation();\n\n      // Catch only owl-stage transitionEnd event\n      if ((event.target || event.srcElement || event.originalTarget) !== this.$stage.get(0)) {\n        return false;\n      }\n    }\n    this.leave('animating');\n    this.trigger('translated');\n  };\n\n  /**\r\n   * Gets viewport width.\r\n   * @protected\r\n   * @return {Number} - The width in pixel.\r\n   */\n  Owl.prototype.viewport = function () {\n    var width;\n    if (this.options.responsiveBaseElement !== window) {\n      width = $(this.options.responsiveBaseElement).width();\n    } else if (window.innerWidth) {\n      width = window.innerWidth;\n    } else if (document.documentElement && document.documentElement.clientWidth) {\n      width = document.documentElement.clientWidth;\n    } else {\n      throw 'Can not detect viewport width.';\n    }\n    return width;\n  };\n\n  /**\r\n   * Replaces the current content.\r\n   * @public\r\n   * @param {HTMLElement|jQuery|String} content - The new content.\r\n   */\n  Owl.prototype.replace = function (content) {\n    this.$stage.empty();\n    this._items = [];\n    if (content) {\n      content = content instanceof jQuery ? content : $(content);\n    }\n    if (this.settings.nestedItemSelector) {\n      content = content.find('.' + this.settings.nestedItemSelector);\n    }\n    content.filter(function () {\n      return this.nodeType === 1;\n    }).each($.proxy(function (index, item) {\n      item = this.prepare(item);\n      this.$stage.append(item);\n      this._items.push(item);\n      this._mergers.push(item.find('[data-merge]').addBack('[data-merge]').attr('data-merge') * 1 || 1);\n    }, this));\n    this.reset(this.isNumeric(this.settings.startPosition) ? this.settings.startPosition : 0);\n    this.invalidate('items');\n  };\n\n  /**\r\n   * Adds an item.\r\n   * @todo Use `item` instead of `content` for the event arguments.\r\n   * @public\r\n   * @param {HTMLElement|jQuery|String} content - The item content to add.\r\n   * @param {Number} [position] - The relative position at which to insert the item otherwise the item will be added to the end.\r\n   */\n  Owl.prototype.add = function (content, position) {\n    var current = this.relative(this._current);\n    position = position === undefined ? this._items.length : this.normalize(position, true);\n    content = content instanceof jQuery ? content : $(content);\n    this.trigger('add', {\n      content: content,\n      position: position\n    });\n    content = this.prepare(content);\n    if (this._items.length === 0 || position === this._items.length) {\n      this._items.length === 0 && this.$stage.append(content);\n      this._items.length !== 0 && this._items[position - 1].after(content);\n      this._items.push(content);\n      this._mergers.push(content.find('[data-merge]').addBack('[data-merge]').attr('data-merge') * 1 || 1);\n    } else {\n      this._items[position].before(content);\n      this._items.splice(position, 0, content);\n      this._mergers.splice(position, 0, content.find('[data-merge]').addBack('[data-merge]').attr('data-merge') * 1 || 1);\n    }\n    this._items[current] && this.reset(this._items[current].index());\n    this.invalidate('items');\n    this.trigger('added', {\n      content: content,\n      position: position\n    });\n  };\n\n  /**\r\n   * Removes an item by its position.\r\n   * @todo Use `item` instead of `content` for the event arguments.\r\n   * @public\r\n   * @param {Number} position - The relative position of the item to remove.\r\n   */\n  Owl.prototype.remove = function (position) {\n    position = this.normalize(position, true);\n    if (position === undefined) {\n      return;\n    }\n    this.trigger('remove', {\n      content: this._items[position],\n      position: position\n    });\n    this._items[position].remove();\n    this._items.splice(position, 1);\n    this._mergers.splice(position, 1);\n    this.invalidate('items');\n    this.trigger('removed', {\n      content: null,\n      position: position\n    });\n  };\n\n  /**\r\n   * Preloads images with auto width.\r\n   * @todo Replace by a more generic approach\r\n   * @protected\r\n   */\n  Owl.prototype.preloadAutoWidthImages = function (images) {\n    images.each($.proxy(function (i, element) {\n      this.enter('pre-loading');\n      element = $(element);\n      $(new Image()).one('load', $.proxy(function (e) {\n        element.attr('src', e.target.src);\n        element.css('opacity', 1);\n        this.leave('pre-loading');\n        !this.is('pre-loading') && !this.is('initializing') && this.refresh();\n      }, this)).attr('src', element.attr('src') || element.attr('data-src') || element.attr('data-src-retina'));\n    }, this));\n  };\n\n  /**\r\n   * Destroys the carousel.\r\n   * @public\r\n   */\n  Owl.prototype.destroy = function () {\n    this.$element.off('.owl.core');\n    this.$stage.off('.owl.core');\n    $(document).off('.owl.core');\n    if (this.settings.responsive !== false) {\n      window.clearTimeout(this.resizeTimer);\n      this.off(window, 'resize', this._handlers.onThrottledResize);\n    }\n    for (var i in this._plugins) {\n      this._plugins[i].destroy();\n    }\n    this.$stage.children('.cloned').remove();\n    this.$stage.unwrap();\n    this.$stage.children().contents().unwrap();\n    this.$stage.children().unwrap();\n    this.$element.removeClass(this.options.refreshClass).removeClass(this.options.loadingClass).removeClass(this.options.loadedClass).removeClass(this.options.rtlClass).removeClass(this.options.dragClass).removeClass(this.options.grabClass).attr('class', this.$element.attr('class').replace(new RegExp(this.options.responsiveClass + '-\\\\S+\\\\s', 'g'), '')).removeData('owl.carousel');\n  };\n\n  /**\r\n   * Operators to calculate right-to-left and left-to-right.\r\n   * @protected\r\n   * @param {Number} [a] - The left side operand.\r\n   * @param {String} [o] - The operator.\r\n   * @param {Number} [b] - The right side operand.\r\n   */\n  Owl.prototype.op = function (a, o, b) {\n    var rtl = this.settings.rtl;\n    switch (o) {\n      case '<':\n        return rtl ? a > b : a < b;\n      case '>':\n        return rtl ? a < b : a > b;\n      case '>=':\n        return rtl ? a <= b : a >= b;\n      case '<=':\n        return rtl ? a >= b : a <= b;\n      default:\n        break;\n    }\n  };\n\n  /**\r\n   * Attaches to an internal event.\r\n   * @protected\r\n   * @param {HTMLElement} element - The event source.\r\n   * @param {String} event - The event name.\r\n   * @param {Function} listener - The event handler to attach.\r\n   * @param {Boolean} capture - Wether the event should be handled at the capturing phase or not.\r\n   */\n  Owl.prototype.on = function (element, event, listener, capture) {\n    if (element.addEventListener) {\n      element.addEventListener(event, listener, capture);\n    } else if (element.attachEvent) {\n      element.attachEvent('on' + event, listener);\n    }\n  };\n\n  /**\r\n   * Detaches from an internal event.\r\n   * @protected\r\n   * @param {HTMLElement} element - The event source.\r\n   * @param {String} event - The event name.\r\n   * @param {Function} listener - The attached event handler to detach.\r\n   * @param {Boolean} capture - Wether the attached event handler was registered as a capturing listener or not.\r\n   */\n  Owl.prototype.off = function (element, event, listener, capture) {\n    if (element.removeEventListener) {\n      element.removeEventListener(event, listener, capture);\n    } else if (element.detachEvent) {\n      element.detachEvent('on' + event, listener);\n    }\n  };\n\n  /**\r\n   * Triggers a public event.\r\n   * @todo Remove `status`, `relatedTarget` should be used instead.\r\n   * @protected\r\n   * @param {String} name - The event name.\r\n   * @param {*} [data=null] - The event data.\r\n   * @param {String} [namespace=carousel] - The event namespace.\r\n   * @param {String} [state] - The state which is associated with the event.\r\n   * @param {Boolean} [enter=false] - Indicates if the call enters the specified state or not.\r\n   * @returns {Event} - The event arguments.\r\n   */\n  Owl.prototype.trigger = function (name, data, namespace, state, enter) {\n    var status = {\n        item: {\n          count: this._items.length,\n          index: this.current()\n        }\n      },\n      handler = $.camelCase($.grep(['on', name, namespace], function (v) {\n        return v;\n      }).join('-').toLowerCase()),\n      event = $.Event([name, 'owl', namespace || 'carousel'].join('.').toLowerCase(), $.extend({\n        relatedTarget: this\n      }, status, data));\n    if (!this._supress[name]) {\n      $.each(this._plugins, function (name, plugin) {\n        if (plugin.onTrigger) {\n          plugin.onTrigger(event);\n        }\n      });\n      this.register({\n        type: Owl.Type.Event,\n        name: name\n      });\n      this.$element.trigger(event);\n      if (this.settings && typeof this.settings[handler] === 'function') {\n        this.settings[handler].call(this, event);\n      }\n    }\n    return event;\n  };\n\n  /**\r\n   * Enters a state.\r\n   * @param name - The state name.\r\n   */\n  Owl.prototype.enter = function (name) {\n    $.each([name].concat(this._states.tags[name] || []), $.proxy(function (i, name) {\n      if (this._states.current[name] === undefined) {\n        this._states.current[name] = 0;\n      }\n      this._states.current[name]++;\n    }, this));\n  };\n\n  /**\r\n   * Leaves a state.\r\n   * @param name - The state name.\r\n   */\n  Owl.prototype.leave = function (name) {\n    $.each([name].concat(this._states.tags[name] || []), $.proxy(function (i, name) {\n      this._states.current[name]--;\n    }, this));\n  };\n\n  /**\r\n   * Registers an event or state.\r\n   * @public\r\n   * @param {Object} object - The event or state to register.\r\n   */\n  Owl.prototype.register = function (object) {\n    if (object.type === Owl.Type.Event) {\n      if (!$.event.special[object.name]) {\n        $.event.special[object.name] = {};\n      }\n      if (!$.event.special[object.name].owl) {\n        var _default = $.event.special[object.name]._default;\n        $.event.special[object.name]._default = function (e) {\n          if (_default && _default.apply && (!e.namespace || e.namespace.indexOf('owl') === -1)) {\n            return _default.apply(this, arguments);\n          }\n          return e.namespace && e.namespace.indexOf('owl') > -1;\n        };\n        $.event.special[object.name].owl = true;\n      }\n    } else if (object.type === Owl.Type.State) {\n      if (!this._states.tags[object.name]) {\n        this._states.tags[object.name] = object.tags;\n      } else {\n        this._states.tags[object.name] = this._states.tags[object.name].concat(object.tags);\n      }\n      this._states.tags[object.name] = $.grep(this._states.tags[object.name], $.proxy(function (tag, i) {\n        return $.inArray(tag, this._states.tags[object.name]) === i;\n      }, this));\n    }\n  };\n\n  /**\r\n   * Suppresses events.\r\n   * @protected\r\n   * @param {Array.<String>} events - The events to suppress.\r\n   */\n  Owl.prototype.suppress = function (events) {\n    $.each(events, $.proxy(function (index, event) {\n      this._supress[event] = true;\n    }, this));\n  };\n\n  /**\r\n   * Releases suppressed events.\r\n   * @protected\r\n   * @param {Array.<String>} events - The events to release.\r\n   */\n  Owl.prototype.release = function (events) {\n    $.each(events, $.proxy(function (index, event) {\n      delete this._supress[event];\n    }, this));\n  };\n\n  /**\r\n   * Gets unified pointer coordinates from event.\r\n   * @todo #261\r\n   * @protected\r\n   * @param {Event} - The `mousedown` or `touchstart` event.\r\n   * @returns {Object} - Contains `x` and `y` coordinates of current pointer position.\r\n   */\n  Owl.prototype.pointer = function (event) {\n    var result = {\n      x: null,\n      y: null\n    };\n    event = event.originalEvent || event || window.event;\n    event = event.touches && event.touches.length ? event.touches[0] : event.changedTouches && event.changedTouches.length ? event.changedTouches[0] : event;\n    if (event.pageX) {\n      result.x = event.pageX;\n      result.y = event.pageY;\n    } else {\n      result.x = event.clientX;\n      result.y = event.clientY;\n    }\n    return result;\n  };\n\n  /**\r\n   * Determines if the input is a Number or something that can be coerced to a Number\r\n   * @protected\r\n   * @param {Number|String|Object|Array|Boolean|RegExp|Function|Symbol} - The input to be tested\r\n   * @returns {Boolean} - An indication if the input is a Number or can be coerced to a Number\r\n   */\n  Owl.prototype.isNumeric = function (number) {\n    return !isNaN(parseFloat(number));\n  };\n\n  /**\r\n   * Gets the difference of two vectors.\r\n   * @todo #261\r\n   * @protected\r\n   * @param {Object} - The first vector.\r\n   * @param {Object} - The second vector.\r\n   * @returns {Object} - The difference.\r\n   */\n  Owl.prototype.difference = function (first, second) {\n    return {\n      x: first.x - second.x,\n      y: first.y - second.y\n    };\n  };\n\n  /**\r\n   * The jQuery Plugin for the Owl Carousel\r\n   * @todo Navigation plugin `next` and `prev`\r\n   * @public\r\n   */\n  $.fn.owlCarousel = function (option) {\n    var args = Array.prototype.slice.call(arguments, 1);\n    return this.each(function () {\n      var $this = $(this),\n        data = $this.data('owl.carousel');\n      if (!data) {\n        data = new Owl(this, _typeof(option) == 'object' && option);\n        $this.data('owl.carousel', data);\n        $.each(['next', 'prev', 'to', 'destroy', 'refresh', 'replace', 'add', 'remove'], function (i, event) {\n          data.register({\n            type: Owl.Type.Event,\n            name: event\n          });\n          data.$element.on(event + '.owl.carousel.core', $.proxy(function (e) {\n            if (e.namespace && e.relatedTarget !== this) {\n              this.suppress([event]);\n              data[event].apply(this, [].slice.call(arguments, 1));\n              this.release([event]);\n            }\n          }, data));\n        });\n      }\n      if (typeof option == 'string' && option.charAt(0) !== '_') {\n        data[option].apply(data, args);\n      }\n    });\n  };\n\n  /**\r\n   * The constructor for the jQuery Plugin\r\n   * @public\r\n   */\n  $.fn.owlCarousel.Constructor = Owl;\n})(window.Zepto || window.jQuery, window, document);\n\n/**\r\n * AutoRefresh Plugin\r\n * @version 2.1.0\r\n * @author Artus Kolanowski\r\n * @author David Deutsch\r\n * @license The MIT License (MIT)\r\n */\n;\n(function ($, window, document, undefined) {\n  /**\r\n   * Creates the auto refresh plugin.\r\n   * @class The Auto Refresh Plugin\r\n   * @param {Owl} carousel - The Owl Carousel\r\n   */\n  var AutoRefresh = function AutoRefresh(carousel) {\n    /**\r\n     * Reference to the core.\r\n     * @protected\r\n     * @type {Owl}\r\n     */\n    this._core = carousel;\n\n    /**\r\n     * Refresh interval.\r\n     * @protected\r\n     * @type {number}\r\n     */\n    this._interval = null;\n\n    /**\r\n     * Whether the element is currently visible or not.\r\n     * @protected\r\n     * @type {Boolean}\r\n     */\n    this._visible = null;\n\n    /**\r\n     * All event handlers.\r\n     * @protected\r\n     * @type {Object}\r\n     */\n    this._handlers = {\n      'initialized.owl.carousel': $.proxy(function (e) {\n        if (e.namespace && this._core.settings.autoRefresh) {\n          this.watch();\n        }\n      }, this)\n    };\n\n    // set default options\n    this._core.options = $.extend({}, AutoRefresh.Defaults, this._core.options);\n\n    // register event handlers\n    this._core.$element.on(this._handlers);\n  };\n\n  /**\r\n   * Default options.\r\n   * @public\r\n   */\n  AutoRefresh.Defaults = {\n    autoRefresh: true,\n    autoRefreshInterval: 500\n  };\n\n  /**\r\n   * Watches the element.\r\n   */\n  AutoRefresh.prototype.watch = function () {\n    if (this._interval) {\n      return;\n    }\n    this._visible = this._core.$element.is(':visible');\n    this._interval = window.setInterval($.proxy(this.refresh, this), this._core.settings.autoRefreshInterval);\n  };\n\n  /**\r\n   * Refreshes the element.\r\n   */\n  AutoRefresh.prototype.refresh = function () {\n    if (this._core.$element.is(':visible') === this._visible) {\n      return;\n    }\n    this._visible = !this._visible;\n    this._core.$element.toggleClass('owl-hidden', !this._visible);\n    this._visible && this._core.invalidate('width') && this._core.refresh();\n  };\n\n  /**\r\n   * Destroys the plugin.\r\n   */\n  AutoRefresh.prototype.destroy = function () {\n    var handler, property;\n    window.clearInterval(this._interval);\n    for (handler in this._handlers) {\n      this._core.$element.off(handler, this._handlers[handler]);\n    }\n    for (property in Object.getOwnPropertyNames(this)) {\n      typeof this[property] != 'function' && (this[property] = null);\n    }\n  };\n  $.fn.owlCarousel.Constructor.Plugins.AutoRefresh = AutoRefresh;\n})(window.Zepto || window.jQuery, window, document);\n\n/**\r\n * Lazy Plugin\r\n * @version 2.1.0\r\n * @author Bartosz Wojciechowski\r\n * @author David Deutsch\r\n * @license The MIT License (MIT)\r\n */\n;\n(function ($, window, document, undefined) {\n  /**\r\n   * Creates the lazy plugin.\r\n   * @class The Lazy Plugin\r\n   * @param {Owl} carousel - The Owl Carousel\r\n   */\n  var Lazy = function Lazy(carousel) {\n    /**\r\n     * Reference to the core.\r\n     * @protected\r\n     * @type {Owl}\r\n     */\n    this._core = carousel;\n\n    /**\r\n     * Already loaded items.\r\n     * @protected\r\n     * @type {Array.<jQuery>}\r\n     */\n    this._loaded = [];\n\n    /**\r\n     * Event handlers.\r\n     * @protected\r\n     * @type {Object}\r\n     */\n    this._handlers = {\n      'initialized.owl.carousel change.owl.carousel resized.owl.carousel': $.proxy(function (e) {\n        if (!e.namespace) {\n          return;\n        }\n        if (!this._core.settings || !this._core.settings.lazyLoad) {\n          return;\n        }\n        if (e.property && e.property.name == 'position' || e.type == 'initialized') {\n          var settings = this._core.settings,\n            n = settings.center && Math.ceil(settings.items / 2) || settings.items,\n            i = settings.center && n * -1 || 0,\n            position = (e.property && e.property.value !== undefined ? e.property.value : this._core.current()) + i,\n            clones = this._core.clones().length,\n            load = $.proxy(function (i, v) {\n              this.load(v);\n            }, this);\n          while (i++ < n) {\n            this.load(clones / 2 + this._core.relative(position));\n            clones && $.each(this._core.clones(this._core.relative(position)), load);\n            position++;\n          }\n        }\n      }, this)\n    };\n\n    // set the default options\n    this._core.options = $.extend({}, Lazy.Defaults, this._core.options);\n\n    // register event handler\n    this._core.$element.on(this._handlers);\n  };\n\n  /**\r\n   * Default options.\r\n   * @public\r\n   */\n  Lazy.Defaults = {\n    lazyLoad: false\n  };\n\n  /**\r\n   * Loads all resources of an item at the specified position.\r\n   * @param {Number} position - The absolute position of the item.\r\n   * @protected\r\n   */\n  Lazy.prototype.load = function (position) {\n    var $item = this._core.$stage.children().eq(position),\n      $elements = $item && $item.find('.owl-lazy');\n    if (!$elements || $.inArray($item.get(0), this._loaded) > -1) {\n      return;\n    }\n    $elements.each($.proxy(function (index, element) {\n      var $element = $(element),\n        image,\n        url = window.devicePixelRatio > 1 && $element.attr('data-src-retina') || $element.attr('data-src');\n      this._core.trigger('load', {\n        element: $element,\n        url: url\n      }, 'lazy');\n      if ($element.is('img')) {\n        $element.one('load.owl.lazy', $.proxy(function () {\n          $element.css('opacity', 1);\n          this._core.trigger('loaded', {\n            element: $element,\n            url: url\n          }, 'lazy');\n        }, this)).attr('src', url);\n      } else {\n        image = new Image();\n        image.onload = $.proxy(function () {\n          $element.css({\n            'background-image': 'url(' + url + ')',\n            'opacity': '1'\n          });\n          this._core.trigger('loaded', {\n            element: $element,\n            url: url\n          }, 'lazy');\n        }, this);\n        image.src = url;\n      }\n    }, this));\n    this._loaded.push($item.get(0));\n  };\n\n  /**\r\n   * Destroys the plugin.\r\n   * @public\r\n   */\n  Lazy.prototype.destroy = function () {\n    var handler, property;\n    for (handler in this.handlers) {\n      this._core.$element.off(handler, this.handlers[handler]);\n    }\n    for (property in Object.getOwnPropertyNames(this)) {\n      typeof this[property] != 'function' && (this[property] = null);\n    }\n  };\n  $.fn.owlCarousel.Constructor.Plugins.Lazy = Lazy;\n})(window.Zepto || window.jQuery, window, document);\n\n/**\r\n * AutoHeight Plugin\r\n * @version 2.1.0\r\n * @author Bartosz Wojciechowski\r\n * @author David Deutsch\r\n * @license The MIT License (MIT)\r\n */\n;\n(function ($, window, document, undefined) {\n  /**\r\n   * Creates the auto height plugin.\r\n   * @class The Auto Height Plugin\r\n   * @param {Owl} carousel - The Owl Carousel\r\n   */\n  var AutoHeight = function AutoHeight(carousel) {\n    /**\r\n     * Reference to the core.\r\n     * @protected\r\n     * @type {Owl}\r\n     */\n    this._core = carousel;\n\n    /**\r\n     * All event handlers.\r\n     * @protected\r\n     * @type {Object}\r\n     */\n    this._handlers = {\n      'initialized.owl.carousel refreshed.owl.carousel': $.proxy(function (e) {\n        if (e.namespace && this._core.settings.autoHeight) {\n          this.update();\n        }\n      }, this),\n      'changed.owl.carousel': $.proxy(function (e) {\n        if (e.namespace && this._core.settings.autoHeight && e.property.name == 'position') {\n          this.update();\n        }\n      }, this),\n      'loaded.owl.lazy': $.proxy(function (e) {\n        if (e.namespace && this._core.settings.autoHeight && e.element.closest('.' + this._core.settings.itemClass).index() === this._core.current()) {\n          this.update();\n        }\n      }, this)\n    };\n\n    // set default options\n    this._core.options = $.extend({}, AutoHeight.Defaults, this._core.options);\n\n    // register event handlers\n    this._core.$element.on(this._handlers);\n  };\n\n  /**\r\n   * Default options.\r\n   * @public\r\n   */\n  AutoHeight.Defaults = {\n    autoHeight: false,\n    autoHeightClass: 'owl-height'\n  };\n\n  /**\r\n   * Updates the view.\r\n   */\n  AutoHeight.prototype.update = function () {\n    var start = this._core._current,\n      end = start + this._core.settings.items,\n      visible = this._core.$stage.children().toArray().slice(start, end),\n      heights = [],\n      maxheight = 0;\n    $.each(visible, function (index, item) {\n      heights.push($(item).height());\n    });\n    maxheight = Math.max.apply(null, heights);\n    this._core.$stage.parent().height(maxheight).addClass(this._core.settings.autoHeightClass);\n  };\n  AutoHeight.prototype.destroy = function () {\n    var handler, property;\n    for (handler in this._handlers) {\n      this._core.$element.off(handler, this._handlers[handler]);\n    }\n    for (property in Object.getOwnPropertyNames(this)) {\n      typeof this[property] != 'function' && (this[property] = null);\n    }\n  };\n  $.fn.owlCarousel.Constructor.Plugins.AutoHeight = AutoHeight;\n})(window.Zepto || window.jQuery, window, document);\n\n/**\r\n * Video Plugin\r\n * @version 2.1.0\r\n * @author Bartosz Wojciechowski\r\n * @author David Deutsch\r\n * @license The MIT License (MIT)\r\n */\n;\n(function ($, window, document, undefined) {\n  /**\r\n   * Creates the video plugin.\r\n   * @class The Video Plugin\r\n   * @param {Owl} carousel - The Owl Carousel\r\n   */\n  var Video = function Video(carousel) {\n    /**\r\n     * Reference to the core.\r\n     * @protected\r\n     * @type {Owl}\r\n     */\n    this._core = carousel;\n\n    /**\r\n     * Cache all video URLs.\r\n     * @protected\r\n     * @type {Object}\r\n     */\n    this._videos = {};\n\n    /**\r\n     * Current playing item.\r\n     * @protected\r\n     * @type {jQuery}\r\n     */\n    this._playing = null;\n\n    /**\r\n     * All event handlers.\r\n     * @todo The cloned content removale is too late\r\n     * @protected\r\n     * @type {Object}\r\n     */\n    this._handlers = {\n      'initialized.owl.carousel': $.proxy(function (e) {\n        if (e.namespace) {\n          this._core.register({\n            type: 'state',\n            name: 'playing',\n            tags: ['interacting']\n          });\n        }\n      }, this),\n      'resize.owl.carousel': $.proxy(function (e) {\n        if (e.namespace && this._core.settings.video && this.isInFullScreen()) {\n          e.preventDefault();\n        }\n      }, this),\n      'refreshed.owl.carousel': $.proxy(function (e) {\n        if (e.namespace && this._core.is('resizing')) {\n          this._core.$stage.find('.cloned .owl-video-frame').remove();\n        }\n      }, this),\n      'changed.owl.carousel': $.proxy(function (e) {\n        if (e.namespace && e.property.name === 'position' && this._playing) {\n          this.stop();\n        }\n      }, this),\n      'prepared.owl.carousel': $.proxy(function (e) {\n        if (!e.namespace) {\n          return;\n        }\n        var $element = $(e.content).find('.owl-video');\n        if ($element.length) {\n          $element.css('display', 'none');\n          this.fetch($element, $(e.content));\n        }\n      }, this)\n    };\n\n    // set default options\n    this._core.options = $.extend({}, Video.Defaults, this._core.options);\n\n    // register event handlers\n    this._core.$element.on(this._handlers);\n    this._core.$element.on('click.owl.video', '.owl-video-play-icon', $.proxy(function (e) {\n      this.play(e);\n    }, this));\n  };\n\n  /**\r\n   * Default options.\r\n   * @public\r\n   */\n  Video.Defaults = {\n    video: false,\n    videoHeight: false,\n    videoWidth: false\n  };\n\n  /**\r\n   * Gets the video ID and the type (YouTube/Vimeo/vzaar only).\r\n   * @protected\r\n   * @param {jQuery} target - The target containing the video data.\r\n   * @param {jQuery} item - The item containing the video.\r\n   */\n  Video.prototype.fetch = function (target, item) {\n    var type = function () {\n        if (target.attr('data-vimeo-id')) {\n          return 'vimeo';\n        } else if (target.attr('data-vzaar-id')) {\n          return 'vzaar';\n        } else {\n          return 'youtube';\n        }\n      }(),\n      id = target.attr('data-vimeo-id') || target.attr('data-youtube-id') || target.attr('data-vzaar-id'),\n      width = target.attr('data-width') || this._core.settings.videoWidth,\n      height = target.attr('data-height') || this._core.settings.videoHeight,\n      url = target.attr('href');\n    if (url) {\n      /*\r\n      \t\tParses the id's out of the following urls (and probably more):\r\n      \t\thttps://www.youtube.com/watch?v=:id\r\n      \t\thttps://youtu.be/:id\r\n      \t\thttps://vimeo.com/:id\r\n      \t\thttps://vimeo.com/channels/:channel/:id\r\n      \t\thttps://vimeo.com/groups/:group/videos/:id\r\n      \t\thttps://app.vzaar.com/videos/:id\r\n      \t\t\t\tVisual example: https://regexper.com/#(http%3A%7Chttps%3A%7C)%5C%2F%5C%2F(player.%7Cwww.%7Capp.)%3F(vimeo%5C.com%7Cyoutu(be%5C.com%7C%5C.be%7Cbe%5C.googleapis%5C.com)%7Cvzaar%5C.com)%5C%2F(video%5C%2F%7Cvideos%5C%2F%7Cembed%5C%2F%7Cchannels%5C%2F.%2B%5C%2F%7Cgroups%5C%2F.%2B%5C%2F%7Cwatch%5C%3Fv%3D%7Cv%5C%2F)%3F(%5BA-Za-z0-9._%25-%5D*)(%5C%26%5CS%2B)%3F\r\n      */\n\n      id = url.match(/(http:|https:|)\\/\\/(player.|www.|app.)?(vimeo\\.com|youtu(be\\.com|\\.be|be\\.googleapis\\.com)|vzaar\\.com)\\/(video\\/|videos\\/|embed\\/|channels\\/.+\\/|groups\\/.+\\/|watch\\?v=|v\\/)?([A-Za-z0-9._%-]*)(\\&\\S+)?/);\n      if (id[3].indexOf('youtu') > -1) {\n        type = 'youtube';\n      } else if (id[3].indexOf('vimeo') > -1) {\n        type = 'vimeo';\n      } else if (id[3].indexOf('vzaar') > -1) {\n        type = 'vzaar';\n      } else {\n        throw new Error('Video URL not supported.');\n      }\n      id = id[6];\n    } else {\n      throw new Error('Missing video URL.');\n    }\n    this._videos[url] = {\n      type: type,\n      id: id,\n      width: width,\n      height: height\n    };\n    item.attr('data-video', url);\n    this.thumbnail(target, this._videos[url]);\n  };\n\n  /**\r\n   * Creates video thumbnail.\r\n   * @protected\r\n   * @param {jQuery} target - The target containing the video data.\r\n   * @param {Object} info - The video info object.\r\n   * @see `fetch`\r\n   */\n  Video.prototype.thumbnail = function (target, video) {\n    var tnLink,\n      icon,\n      path,\n      dimensions = video.width && video.height ? 'style=\"width:' + video.width + 'px;height:' + video.height + 'px;\"' : '',\n      customTn = target.find('img'),\n      srcType = 'src',\n      lazyClass = '',\n      settings = this._core.settings,\n      create = function create(path) {\n        icon = '<div class=\"owl-video-play-icon\"></div>';\n        if (settings.lazyLoad) {\n          tnLink = '<div class=\"owl-video-tn ' + lazyClass + '\" ' + srcType + '=\"' + path + '\"></div>';\n        } else {\n          tnLink = '<div class=\"owl-video-tn\" style=\"opacity:1;background-image:url(' + path + ')\"></div>';\n        }\n        target.after(tnLink);\n        target.after(icon);\n      };\n\n    // wrap video content into owl-video-wrapper div\n    target.wrap('<div class=\"owl-video-wrapper\"' + dimensions + '></div>');\n    if (this._core.settings.lazyLoad) {\n      srcType = 'data-src';\n      lazyClass = 'owl-lazy';\n    }\n\n    // custom thumbnail\n    if (customTn.length) {\n      create(customTn.attr(srcType));\n      customTn.remove();\n      return false;\n    }\n    if (video.type === 'youtube') {\n      path = \"//img.youtube.com/vi/\" + video.id + \"/hqdefault.jpg\";\n      create(path);\n    } else if (video.type === 'vimeo') {\n      $.ajax({\n        type: 'GET',\n        url: '//vimeo.com/api/v2/video/' + video.id + '.json',\n        jsonp: 'callback',\n        dataType: 'jsonp',\n        success: function success(data) {\n          path = data[0].thumbnail_large;\n          create(path);\n        }\n      });\n    } else if (video.type === 'vzaar') {\n      $.ajax({\n        type: 'GET',\n        url: '//vzaar.com/api/videos/' + video.id + '.json',\n        jsonp: 'callback',\n        dataType: 'jsonp',\n        success: function success(data) {\n          path = data.framegrab_url;\n          create(path);\n        }\n      });\n    }\n  };\n\n  /**\r\n   * Stops the current video.\r\n   * @public\r\n   */\n  Video.prototype.stop = function () {\n    this._core.trigger('stop', null, 'video');\n    this._playing.find('.owl-video-frame').remove();\n    this._playing.removeClass('owl-video-playing');\n    this._playing = null;\n    this._core.leave('playing');\n    this._core.trigger('stopped', null, 'video');\n  };\n\n  /**\r\n   * Starts the current video.\r\n   * @public\r\n   * @param {Event} event - The event arguments.\r\n   */\n  Video.prototype.play = function (event) {\n    var target = $(event.target),\n      item = target.closest('.' + this._core.settings.itemClass),\n      video = this._videos[item.attr('data-video')],\n      width = video.width || '100%',\n      height = video.height || this._core.$stage.height(),\n      html;\n    if (this._playing) {\n      return;\n    }\n    this._core.enter('playing');\n    this._core.trigger('play', null, 'video');\n    item = this._core.items(this._core.relative(item.index()));\n    this._core.reset(item.index());\n    if (video.type === 'youtube') {\n      html = '<iframe width=\"' + width + '\" height=\"' + height + '\" src=\"//www.youtube.com/embed/' + video.id + '?autoplay=1&v=' + video.id + '\" frameborder=\"0\" allowfullscreen></iframe>';\n    } else if (video.type === 'vimeo') {\n      html = '<iframe src=\"//player.vimeo.com/video/' + video.id + '?autoplay=1\" width=\"' + width + '\" height=\"' + height + '\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>';\n    } else if (video.type === 'vzaar') {\n      html = '<iframe frameborder=\"0\"' + 'height=\"' + height + '\"' + 'width=\"' + width + '\" allowfullscreen mozallowfullscreen webkitAllowFullScreen ' + 'src=\"//view.vzaar.com/' + video.id + '/player?autoplay=true\"></iframe>';\n    }\n    $('<div class=\"owl-video-frame\">' + html + '</div>').insertAfter(item.find('.owl-video'));\n    this._playing = item.addClass('owl-video-playing');\n  };\n\n  /**\r\n   * Checks whether an video is currently in full screen mode or not.\r\n   * @todo Bad style because looks like a readonly method but changes members.\r\n   * @protected\r\n   * @returns {Boolean}\r\n   */\n  Video.prototype.isInFullScreen = function () {\n    var element = document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement;\n    return element && $(element).parent().hasClass('owl-video-frame');\n  };\n\n  /**\r\n   * Destroys the plugin.\r\n   */\n  Video.prototype.destroy = function () {\n    var handler, property;\n    this._core.$element.off('click.owl.video');\n    for (handler in this._handlers) {\n      this._core.$element.off(handler, this._handlers[handler]);\n    }\n    for (property in Object.getOwnPropertyNames(this)) {\n      typeof this[property] != 'function' && (this[property] = null);\n    }\n  };\n  $.fn.owlCarousel.Constructor.Plugins.Video = Video;\n})(window.Zepto || window.jQuery, window, document);\n\n/**\r\n * Animate Plugin\r\n * @version 2.1.0\r\n * @author Bartosz Wojciechowski\r\n * @author David Deutsch\r\n * @license The MIT License (MIT)\r\n */\n;\n(function ($, window, document, undefined) {\n  /**\r\n   * Creates the animate plugin.\r\n   * @class The Navigation Plugin\r\n   * @param {Owl} scope - The Owl Carousel\r\n   */\n  var Animate = function Animate(scope) {\n    this.core = scope;\n    this.core.options = $.extend({}, Animate.Defaults, this.core.options);\n    this.swapping = true;\n    this.previous = undefined;\n    this.next = undefined;\n    this.handlers = {\n      'change.owl.carousel': $.proxy(function (e) {\n        if (e.namespace && e.property.name == 'position') {\n          this.previous = this.core.current();\n          this.next = e.property.value;\n        }\n      }, this),\n      'drag.owl.carousel dragged.owl.carousel translated.owl.carousel': $.proxy(function (e) {\n        if (e.namespace) {\n          this.swapping = e.type == 'translated';\n        }\n      }, this),\n      'translate.owl.carousel': $.proxy(function (e) {\n        if (e.namespace && this.swapping && (this.core.options.animateOut || this.core.options.animateIn)) {\n          this.swap();\n        }\n      }, this)\n    };\n    this.core.$element.on(this.handlers);\n  };\n\n  /**\r\n   * Default options.\r\n   * @public\r\n   */\n  Animate.Defaults = {\n    animateOut: false,\n    animateIn: false\n  };\n\n  /**\r\n   * Toggles the animation classes whenever an translations starts.\r\n   * @protected\r\n   * @returns {Boolean|undefined}\r\n   */\n  Animate.prototype.swap = function () {\n    if (this.core.settings.items !== 1) {\n      return;\n    }\n    if (!$.support.animation || !$.support.transition) {\n      return;\n    }\n    this.core.speed(0);\n    var left,\n      clear = $.proxy(this.clear, this),\n      previous = this.core.$stage.children().eq(this.previous),\n      next = this.core.$stage.children().eq(this.next),\n      incoming = this.core.settings.animateIn,\n      outgoing = this.core.settings.animateOut;\n    if (this.core.current() === this.previous) {\n      return;\n    }\n    if (outgoing) {\n      left = this.core.coordinates(this.previous) - this.core.coordinates(this.next);\n      previous.one($.support.animation.end, clear).css({\n        'left': left + 'px'\n      }).addClass('animated owl-animated-out').addClass(outgoing);\n    }\n    if (incoming) {\n      next.one($.support.animation.end, clear).addClass('animated owl-animated-in').addClass(incoming);\n    }\n  };\n  Animate.prototype.clear = function (e) {\n    $(e.target).css({\n      'left': ''\n    }).removeClass('animated owl-animated-out owl-animated-in').removeClass(this.core.settings.animateIn).removeClass(this.core.settings.animateOut);\n    this.core.onTransitionEnd();\n  };\n\n  /**\r\n   * Destroys the plugin.\r\n   * @public\r\n   */\n  Animate.prototype.destroy = function () {\n    var handler, property;\n    for (handler in this.handlers) {\n      this.core.$element.off(handler, this.handlers[handler]);\n    }\n    for (property in Object.getOwnPropertyNames(this)) {\n      typeof this[property] != 'function' && (this[property] = null);\n    }\n  };\n  $.fn.owlCarousel.Constructor.Plugins.Animate = Animate;\n})(window.Zepto || window.jQuery, window, document);\n\n/**\r\n * Autoplay Plugin\r\n * @version 2.1.0\r\n * @author Bartosz Wojciechowski\r\n * @author Artus Kolanowski\r\n * @author David Deutsch\r\n * @license The MIT License (MIT)\r\n */\n;\n(function ($, window, document, undefined) {\n  /**\r\n   * Creates the autoplay plugin.\r\n   * @class The Autoplay Plugin\r\n   * @param {Owl} scope - The Owl Carousel\r\n   */\n  var Autoplay = function Autoplay(carousel) {\n    /**\r\n     * Reference to the core.\r\n     * @protected\r\n     * @type {Owl}\r\n     */\n    this._core = carousel;\n\n    /**\r\n     * The autoplay timeout.\r\n     * @type {Timeout}\r\n     */\n    this._timeout = null;\n\n    /**\r\n     * Indicates whenever the autoplay is paused.\r\n     * @type {Boolean}\r\n     */\n    this._paused = false;\n\n    /**\r\n     * All event handlers.\r\n     * @protected\r\n     * @type {Object}\r\n     */\n    this._handlers = {\n      'changed.owl.carousel': $.proxy(function (e) {\n        if (e.namespace && e.property.name === 'settings') {\n          if (this._core.settings.autoplay) {\n            this.play();\n          } else {\n            this.stop();\n          }\n        } else if (e.namespace && e.property.name === 'position') {\n          //console.log('play?', e);\n          if (this._core.settings.autoplay) {\n            this._setAutoPlayInterval();\n          }\n        }\n      }, this),\n      'initialized.owl.carousel': $.proxy(function (e) {\n        if (e.namespace && this._core.settings.autoplay) {\n          this.play();\n        }\n      }, this),\n      'play.owl.autoplay': $.proxy(function (e, t, s) {\n        if (e.namespace) {\n          this.play(t, s);\n        }\n      }, this),\n      'stop.owl.autoplay': $.proxy(function (e) {\n        if (e.namespace) {\n          this.stop();\n        }\n      }, this),\n      'mouseover.owl.autoplay': $.proxy(function () {\n        if (this._core.settings.autoplayHoverPause && this._core.is('rotating')) {\n          this.pause();\n        }\n      }, this),\n      'mouseleave.owl.autoplay': $.proxy(function () {\n        if (this._core.settings.autoplayHoverPause && this._core.is('rotating')) {\n          this.play();\n        }\n      }, this),\n      'touchstart.owl.core': $.proxy(function () {\n        if (this._core.settings.autoplayHoverPause && this._core.is('rotating')) {\n          this.pause();\n        }\n      }, this),\n      'touchend.owl.core': $.proxy(function () {\n        if (this._core.settings.autoplayHoverPause) {\n          this.play();\n        }\n      }, this)\n    };\n\n    // register event handlers\n    this._core.$element.on(this._handlers);\n\n    // set default options\n    this._core.options = $.extend({}, Autoplay.Defaults, this._core.options);\n  };\n\n  /**\r\n   * Default options.\r\n   * @public\r\n   */\n  Autoplay.Defaults = {\n    autoplay: false,\n    autoplayTimeout: 5000,\n    autoplayHoverPause: false,\n    autoplaySpeed: false\n  };\n\n  /**\r\n   * Starts the autoplay.\r\n   * @public\r\n   * @param {Number} [timeout] - The interval before the next animation starts.\r\n   * @param {Number} [speed] - The animation speed for the animations.\r\n   */\n  Autoplay.prototype.play = function (timeout, speed) {\n    this._paused = false;\n    if (this._core.is('rotating')) {\n      return;\n    }\n    this._core.enter('rotating');\n    this._setAutoPlayInterval();\n  };\n\n  /**\r\n   * Gets a new timeout\r\n   * @private\r\n   * @param {Number} [timeout] - The interval before the next animation starts.\r\n   * @param {Number} [speed] - The animation speed for the animations.\r\n   * @return {Timeout}\r\n   */\n  Autoplay.prototype._getNextTimeout = function (timeout, speed) {\n    if (this._timeout) {\n      window.clearTimeout(this._timeout);\n    }\n    return window.setTimeout($.proxy(function () {\n      if (this._paused || this._core.is('busy') || this._core.is('interacting') || document.hidden) {\n        return;\n      }\n      this._core.next(speed || this._core.settings.autoplaySpeed);\n    }, this), timeout || this._core.settings.autoplayTimeout);\n  };\n\n  /**\r\n   * Sets autoplay in motion.\r\n   * @private\r\n   */\n  Autoplay.prototype._setAutoPlayInterval = function () {\n    this._timeout = this._getNextTimeout();\n  };\n\n  /**\r\n   * Stops the autoplay.\r\n   * @public\r\n   */\n  Autoplay.prototype.stop = function () {\n    if (!this._core.is('rotating')) {\n      return;\n    }\n    window.clearTimeout(this._timeout);\n    this._core.leave('rotating');\n  };\n\n  /**\r\n   * Stops the autoplay.\r\n   * @public\r\n   */\n  Autoplay.prototype.pause = function () {\n    if (!this._core.is('rotating')) {\n      return;\n    }\n    this._paused = true;\n  };\n\n  /**\r\n   * Destroys the plugin.\r\n   */\n  Autoplay.prototype.destroy = function () {\n    var handler, property;\n    this.stop();\n    for (handler in this._handlers) {\n      this._core.$element.off(handler, this._handlers[handler]);\n    }\n    for (property in Object.getOwnPropertyNames(this)) {\n      typeof this[property] != 'function' && (this[property] = null);\n    }\n  };\n  $.fn.owlCarousel.Constructor.Plugins.autoplay = Autoplay;\n})(window.Zepto || window.jQuery, window, document);\n\n/**\r\n * Navigation Plugin\r\n * @version 2.1.0\r\n * @author Artus Kolanowski\r\n * @author David Deutsch\r\n * @license The MIT License (MIT)\r\n */\n;\n(function ($, window, document, undefined) {\n  'use strict';\n\n  /**\r\n   * Creates the navigation plugin.\r\n   * @class The Navigation Plugin\r\n   * @param {Owl} carousel - The Owl Carousel.\r\n   */\n  var Navigation = function Navigation(carousel) {\n    /**\r\n     * Reference to the core.\r\n     * @protected\r\n     * @type {Owl}\r\n     */\n    this._core = carousel;\n\n    /**\r\n     * Indicates whether the plugin is initialized or not.\r\n     * @protected\r\n     * @type {Boolean}\r\n     */\n    this._initialized = false;\n\n    /**\r\n     * The current paging indexes.\r\n     * @protected\r\n     * @type {Array}\r\n     */\n    this._pages = [];\n\n    /**\r\n     * All DOM elements of the user interface.\r\n     * @protected\r\n     * @type {Object}\r\n     */\n    this._controls = {};\n\n    /**\r\n     * Markup for an indicator.\r\n     * @protected\r\n     * @type {Array.<String>}\r\n     */\n    this._templates = [];\n\n    /**\r\n     * The carousel element.\r\n     * @type {jQuery}\r\n     */\n    this.$element = this._core.$element;\n\n    /**\r\n     * Overridden methods of the carousel.\r\n     * @protected\r\n     * @type {Object}\r\n     */\n    this._overrides = {\n      next: this._core.next,\n      prev: this._core.prev,\n      to: this._core.to\n    };\n\n    /**\r\n     * All event handlers.\r\n     * @protected\r\n     * @type {Object}\r\n     */\n    this._handlers = {\n      'prepared.owl.carousel': $.proxy(function (e) {\n        if (e.namespace && this._core.settings.dotsData) {\n          this._templates.push('<div class=\"' + this._core.settings.dotClass + '\">' + $(e.content).find('[data-dot]').addBack('[data-dot]').attr('data-dot') + '</div>');\n        }\n      }, this),\n      'added.owl.carousel': $.proxy(function (e) {\n        if (e.namespace && this._core.settings.dotsData) {\n          this._templates.splice(e.position, 0, this._templates.pop());\n        }\n      }, this),\n      'remove.owl.carousel': $.proxy(function (e) {\n        if (e.namespace && this._core.settings.dotsData) {\n          this._templates.splice(e.position, 1);\n        }\n      }, this),\n      'changed.owl.carousel': $.proxy(function (e) {\n        if (e.namespace && e.property.name == 'position') {\n          this.draw();\n        }\n      }, this),\n      'initialized.owl.carousel': $.proxy(function (e) {\n        if (e.namespace && !this._initialized) {\n          this._core.trigger('initialize', null, 'navigation');\n          this.initialize();\n          this.update();\n          this.draw();\n          this._initialized = true;\n          this._core.trigger('initialized', null, 'navigation');\n        }\n      }, this),\n      'refreshed.owl.carousel': $.proxy(function (e) {\n        if (e.namespace && this._initialized) {\n          this._core.trigger('refresh', null, 'navigation');\n          this.update();\n          this.draw();\n          this._core.trigger('refreshed', null, 'navigation');\n        }\n      }, this)\n    };\n\n    // set default options\n    this._core.options = $.extend({}, Navigation.Defaults, this._core.options);\n\n    // register event handlers\n    this.$element.on(this._handlers);\n  };\n\n  /**\r\n   * Default options.\r\n   * @public\r\n   * @todo Rename `slideBy` to `navBy`\r\n   */\n  Navigation.Defaults = {\n    nav: false,\n    navText: ['prev', 'next'],\n    navSpeed: false,\n    navElement: 'div',\n    navContainer: false,\n    navContainerClass: 'owl-nav',\n    navClass: ['owl-prev', 'owl-next'],\n    slideBy: 1,\n    dotClass: 'owl-dot',\n    dotsClass: 'owl-dots',\n    dots: true,\n    dotsEach: false,\n    dotsData: false,\n    dotsSpeed: false,\n    dotsContainer: false\n  };\n\n  /**\r\n   * Initializes the layout of the plugin and extends the carousel.\r\n   * @protected\r\n   */\n  Navigation.prototype.initialize = function () {\n    var override,\n      settings = this._core.settings;\n\n    // create DOM structure for relative navigation\n    this._controls.$relative = (settings.navContainer ? $(settings.navContainer) : $('<div>').addClass(settings.navContainerClass).appendTo(this.$element)).addClass('disabled');\n    this._controls.$previous = $('<' + settings.navElement + '>').addClass(settings.navClass[0]).html(settings.navText[0]).prependTo(this._controls.$relative).on('click', $.proxy(function (e) {\n      this.prev(settings.navSpeed);\n    }, this));\n    this._controls.$next = $('<' + settings.navElement + '>').addClass(settings.navClass[1]).html(settings.navText[1]).appendTo(this._controls.$relative).on('click', $.proxy(function (e) {\n      this.next(settings.navSpeed);\n    }, this));\n\n    // create DOM structure for absolute navigation\n    if (!settings.dotsData) {\n      this._templates = [$('<div>').addClass(settings.dotClass).append($('<span>')).prop('outerHTML')];\n    }\n    this._controls.$absolute = (settings.dotsContainer ? $(settings.dotsContainer) : $('<div>').addClass(settings.dotsClass).appendTo(this.$element)).addClass('disabled');\n    this._controls.$absolute.on('click', 'div', $.proxy(function (e) {\n      var index = $(e.target).parent().is(this._controls.$absolute) ? $(e.target).index() : $(e.target).parent().index();\n      e.preventDefault();\n      this.to(index, settings.dotsSpeed);\n    }, this));\n\n    // override public methods of the carousel\n    for (override in this._overrides) {\n      this._core[override] = $.proxy(this[override], this);\n    }\n  };\n\n  /**\r\n   * Destroys the plugin.\r\n   * @protected\r\n   */\n  Navigation.prototype.destroy = function () {\n    var handler, control, property, override;\n    for (handler in this._handlers) {\n      this.$element.off(handler, this._handlers[handler]);\n    }\n    for (control in this._controls) {\n      this._controls[control].remove();\n    }\n    for (override in this.overides) {\n      this._core[override] = this._overrides[override];\n    }\n    for (property in Object.getOwnPropertyNames(this)) {\n      typeof this[property] != 'function' && (this[property] = null);\n    }\n  };\n\n  /**\r\n   * Updates the internal state.\r\n   * @protected\r\n   */\n  Navigation.prototype.update = function () {\n    var i,\n      j,\n      k,\n      lower = this._core.clones().length / 2,\n      upper = lower + this._core.items().length,\n      maximum = this._core.maximum(true),\n      settings = this._core.settings,\n      size = settings.center || settings.autoWidth || settings.dotsData ? 1 : settings.dotsEach || settings.items;\n    if (settings.slideBy !== 'page') {\n      settings.slideBy = Math.min(settings.slideBy, settings.items);\n    }\n    if (settings.dots || settings.slideBy == 'page') {\n      this._pages = [];\n      for (i = lower, j = 0, k = 0; i < upper; i++) {\n        if (j >= size || j === 0) {\n          this._pages.push({\n            start: Math.min(maximum, i - lower),\n            end: i - lower + size - 1\n          });\n          if (Math.min(maximum, i - lower) === maximum) {\n            break;\n          }\n          j = 0, ++k;\n        }\n        j += this._core.mergers(this._core.relative(i));\n      }\n    }\n  };\n\n  /**\r\n   * Draws the user interface.\r\n   * @todo The option `dotsData` wont work.\r\n   * @protected\r\n   */\n  Navigation.prototype.draw = function () {\n    var difference,\n      settings = this._core.settings,\n      disabled = this._core.items().length <= settings.items,\n      index = this._core.relative(this._core.current()),\n      loop = settings.loop || settings.rewind;\n    this._controls.$relative.toggleClass('disabled', !settings.nav || disabled);\n    if (settings.nav) {\n      this._controls.$previous.toggleClass('disabled', !loop && index <= this._core.minimum(true));\n      this._controls.$next.toggleClass('disabled', !loop && index >= this._core.maximum(true));\n    }\n    this._controls.$absolute.toggleClass('disabled', !settings.dots || disabled);\n    if (settings.dots) {\n      difference = this._pages.length - this._controls.$absolute.children().length;\n      if (settings.dotsData && difference !== 0) {\n        this._controls.$absolute.html(this._templates.join(''));\n      } else if (difference > 0) {\n        this._controls.$absolute.append(new Array(difference + 1).join(this._templates[0]));\n      } else if (difference < 0) {\n        this._controls.$absolute.children().slice(difference).remove();\n      }\n      this._controls.$absolute.find('.active').removeClass('active');\n      this._controls.$absolute.children().eq($.inArray(this.current(), this._pages)).addClass('active');\n    }\n  };\n\n  /**\r\n   * Extends event data.\r\n   * @protected\r\n   * @param {Event} event - The event object which gets thrown.\r\n   */\n  Navigation.prototype.onTrigger = function (event) {\n    var settings = this._core.settings;\n    event.page = {\n      index: $.inArray(this.current(), this._pages),\n      count: this._pages.length,\n      size: settings && (settings.center || settings.autoWidth || settings.dotsData ? 1 : settings.dotsEach || settings.items)\n    };\n  };\n\n  /**\r\n   * Gets the current page position of the carousel.\r\n   * @protected\r\n   * @returns {Number}\r\n   */\n  Navigation.prototype.current = function () {\n    var current = this._core.relative(this._core.current());\n    return $.grep(this._pages, $.proxy(function (page, index) {\n      return page.start <= current && page.end >= current;\n    }, this)).pop();\n  };\n\n  /**\r\n   * Gets the current succesor/predecessor position.\r\n   * @protected\r\n   * @returns {Number}\r\n   */\n  Navigation.prototype.getPosition = function (successor) {\n    var position,\n      length,\n      settings = this._core.settings;\n    if (settings.slideBy == 'page') {\n      position = $.inArray(this.current(), this._pages);\n      length = this._pages.length;\n      successor ? ++position : --position;\n      position = this._pages[(position % length + length) % length].start;\n    } else {\n      position = this._core.relative(this._core.current());\n      length = this._core.items().length;\n      successor ? position += settings.slideBy : position -= settings.slideBy;\n    }\n    return position;\n  };\n\n  /**\r\n   * Slides to the next item or page.\r\n   * @public\r\n   * @param {Number} [speed=false] - The time in milliseconds for the transition.\r\n   */\n  Navigation.prototype.next = function (speed) {\n    $.proxy(this._overrides.to, this._core)(this.getPosition(true), speed);\n  };\n\n  /**\r\n   * Slides to the previous item or page.\r\n   * @public\r\n   * @param {Number} [speed=false] - The time in milliseconds for the transition.\r\n   */\n  Navigation.prototype.prev = function (speed) {\n    $.proxy(this._overrides.to, this._core)(this.getPosition(false), speed);\n  };\n\n  /**\r\n   * Slides to the specified item or page.\r\n   * @public\r\n   * @param {Number} position - The position of the item or page.\r\n   * @param {Number} [speed] - The time in milliseconds for the transition.\r\n   * @param {Boolean} [standard=false] - Whether to use the standard behaviour or not.\r\n   */\n  Navigation.prototype.to = function (position, speed, standard) {\n    var length;\n    if (!standard && this._pages.length) {\n      length = this._pages.length;\n      $.proxy(this._overrides.to, this._core)(this._pages[(position % length + length) % length].start, speed);\n    } else {\n      $.proxy(this._overrides.to, this._core)(position, speed);\n    }\n  };\n  $.fn.owlCarousel.Constructor.Plugins.Navigation = Navigation;\n})(window.Zepto || window.jQuery, window, document);\n\n/**\r\n * Hash Plugin\r\n * @version 2.1.0\r\n * @author Artus Kolanowski\r\n * @author David Deutsch\r\n * @license The MIT License (MIT)\r\n */\n;\n(function ($, window, document, undefined) {\n  'use strict';\n\n  /**\r\n   * Creates the hash plugin.\r\n   * @class The Hash Plugin\r\n   * @param {Owl} carousel - The Owl Carousel\r\n   */\n  var Hash = function Hash(carousel) {\n    /**\r\n     * Reference to the core.\r\n     * @protected\r\n     * @type {Owl}\r\n     */\n    this._core = carousel;\n\n    /**\r\n     * Hash index for the items.\r\n     * @protected\r\n     * @type {Object}\r\n     */\n    this._hashes = {};\n\n    /**\r\n     * The carousel element.\r\n     * @type {jQuery}\r\n     */\n    this.$element = this._core.$element;\n\n    /**\r\n     * All event handlers.\r\n     * @protected\r\n     * @type {Object}\r\n     */\n    this._handlers = {\n      'initialized.owl.carousel': $.proxy(function (e) {\n        if (e.namespace && this._core.settings.startPosition === 'URLHash') {\n          $(window).trigger('hashchange.owl.navigation');\n        }\n      }, this),\n      'prepared.owl.carousel': $.proxy(function (e) {\n        if (e.namespace) {\n          var hash = $(e.content).find('[data-hash]').addBack('[data-hash]').attr('data-hash');\n          if (!hash) {\n            return;\n          }\n          this._hashes[hash] = e.content;\n        }\n      }, this),\n      'changed.owl.carousel': $.proxy(function (e) {\n        if (e.namespace && e.property.name === 'position') {\n          var current = this._core.items(this._core.relative(this._core.current())),\n            hash = $.map(this._hashes, function (item, hash) {\n              return item === current ? hash : null;\n            }).join();\n          if (!hash || window.location.hash.slice(1) === hash) {\n            return;\n          }\n          window.location.hash = hash;\n        }\n      }, this)\n    };\n\n    // set default options\n    this._core.options = $.extend({}, Hash.Defaults, this._core.options);\n\n    // register the event handlers\n    this.$element.on(this._handlers);\n\n    // register event listener for hash navigation\n    $(window).on('hashchange.owl.navigation', $.proxy(function (e) {\n      var hash = window.location.hash.substring(1),\n        items = this._core.$stage.children(),\n        position = this._hashes[hash] && items.index(this._hashes[hash]);\n      if (position === undefined || position === this._core.current()) {\n        return;\n      }\n      this._core.to(this._core.relative(position), false, true);\n    }, this));\n  };\n\n  /**\r\n   * Default options.\r\n   * @public\r\n   */\n  Hash.Defaults = {\n    URLhashListener: false\n  };\n\n  /**\r\n   * Destroys the plugin.\r\n   * @public\r\n   */\n  Hash.prototype.destroy = function () {\n    var handler, property;\n    $(window).off('hashchange.owl.navigation');\n    for (handler in this._handlers) {\n      this._core.$element.off(handler, this._handlers[handler]);\n    }\n    for (property in Object.getOwnPropertyNames(this)) {\n      typeof this[property] != 'function' && (this[property] = null);\n    }\n  };\n  $.fn.owlCarousel.Constructor.Plugins.Hash = Hash;\n})(window.Zepto || window.jQuery, window, document);\n\n/**\r\n * Support Plugin\r\n *\r\n * @version 2.1.0\r\n * @author Vivid Planet Software GmbH\r\n * @author Artus Kolanowski\r\n * @author David Deutsch\r\n * @license The MIT License (MIT)\r\n */\n;\n(function ($, window, document, undefined) {\n  var style = $('<support>').get(0).style,\n    prefixes = 'Webkit Moz O ms'.split(' '),\n    events = {\n      transition: {\n        end: {\n          WebkitTransition: 'webkitTransitionEnd',\n          MozTransition: 'transitionend',\n          OTransition: 'oTransitionEnd',\n          transition: 'transitionend'\n        }\n      },\n      animation: {\n        end: {\n          WebkitAnimation: 'webkitAnimationEnd',\n          MozAnimation: 'animationend',\n          OAnimation: 'oAnimationEnd',\n          animation: 'animationend'\n        }\n      }\n    },\n    tests = {\n      csstransforms: function csstransforms() {\n        return !!test('transform');\n      },\n      csstransforms3d: function csstransforms3d() {\n        return !!test('perspective');\n      },\n      csstransitions: function csstransitions() {\n        return !!test('transition');\n      },\n      cssanimations: function cssanimations() {\n        return !!test('animation');\n      }\n    };\n  function test(property, prefixed) {\n    var result = false,\n      upper = property.charAt(0).toUpperCase() + property.slice(1);\n    $.each((property + ' ' + prefixes.join(upper + ' ') + upper).split(' '), function (i, property) {\n      if (style[property] !== undefined) {\n        result = prefixed ? property : true;\n        return false;\n      }\n    });\n    return result;\n  }\n  function prefixed(property) {\n    return test(property, true);\n  }\n  if (tests.csstransitions()) {\n    /* jshint -W053 */\n    $.support.transition = new String(prefixed('transition'));\n    $.support.transition.end = events.transition.end[$.support.transition];\n  }\n  if (tests.cssanimations()) {\n    /* jshint -W053 */\n    $.support.animation = new String(prefixed('animation'));\n    $.support.animation.end = events.animation.end[$.support.animation];\n  }\n  if (tests.csstransforms()) {\n    /* jshint -W053 */\n    $.support.transform = new String(prefixed('transform'));\n    $.support.transform3d = tests.csstransforms3d();\n  }\n})(window.Zepto || window.jQuery, window, document);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/owl-carousel.js\n");

/***/ }),

/***/ "./resources/js/parallax.js":
/*!**********************************!*\
  !*** ./resources/js/parallax.js ***!
  \**********************************/
/***/ (() => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n/*!\r\n * parallax.js v1.5.0 (http://pixelcog.github.io/parallax.js/)\r\n * @copyright 2016 PixelCog, Inc.\r\n * @license MIT (https://github.com/pixelcog/parallax.js/blob/master/LICENSE)\r\n */\n\n;\n(function ($, window, document, undefined) {\n  // Polyfill for requestAnimationFrame\n  // via: https://gist.github.com/paulirish/1579671\n\n  (function () {\n    var lastTime = 0;\n    var vendors = ['ms', 'moz', 'webkit', 'o'];\n    for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {\n      window.requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];\n      window.cancelAnimationFrame = window[vendors[x] + 'CancelAnimationFrame'] || window[vendors[x] + 'CancelRequestAnimationFrame'];\n    }\n    if (!window.requestAnimationFrame) window.requestAnimationFrame = function (callback) {\n      var currTime = new Date().getTime();\n      var timeToCall = Math.max(0, 16 - (currTime - lastTime));\n      var id = window.setTimeout(function () {\n        callback(currTime + timeToCall);\n      }, timeToCall);\n      lastTime = currTime + timeToCall;\n      return id;\n    };\n    if (!window.cancelAnimationFrame) window.cancelAnimationFrame = function (id) {\n      clearTimeout(id);\n    };\n  })();\n\n  // Parallax Constructor\n\n  function Parallax(element, options) {\n    var self = this;\n    if (_typeof(options) == 'object') {\n      delete options.refresh;\n      delete options.render;\n      $.extend(this, options);\n    }\n    this.$element = $(element);\n    if (!this.imageSrc && this.$element.is('img')) {\n      this.imageSrc = this.$element.attr('src');\n    }\n    var positions = (this.position + '').toLowerCase().match(/\\S+/g) || [];\n    if (positions.length < 1) {\n      positions.push('center');\n    }\n    if (positions.length == 1) {\n      positions.push(positions[0]);\n    }\n    if (positions[0] == 'top' || positions[0] == 'bottom' || positions[1] == 'left' || positions[1] == 'right') {\n      positions = [positions[1], positions[0]];\n    }\n    if (this.positionX !== undefined) positions[0] = this.positionX.toLowerCase();\n    if (this.positionY !== undefined) positions[1] = this.positionY.toLowerCase();\n    self.positionX = positions[0];\n    self.positionY = positions[1];\n    if (this.positionX != 'left' && this.positionX != 'right') {\n      if (isNaN(parseInt(this.positionX))) {\n        this.positionX = 'center';\n      } else {\n        this.positionX = parseInt(this.positionX);\n      }\n    }\n    if (this.positionY != 'top' && this.positionY != 'bottom') {\n      if (isNaN(parseInt(this.positionY))) {\n        this.positionY = 'center';\n      } else {\n        this.positionY = parseInt(this.positionY);\n      }\n    }\n    this.position = this.positionX + (isNaN(this.positionX) ? '' : 'px') + ' ' + this.positionY + (isNaN(this.positionY) ? '' : 'px');\n    if (navigator.userAgent.match(/(iPod|iPhone|iPad)/)) {\n      if (this.imageSrc && this.iosFix && !this.$element.is('img')) {\n        this.$element.css({\n          backgroundImage: 'url(' + this.imageSrc + ')',\n          backgroundSize: 'cover',\n          backgroundPosition: this.position\n        });\n      }\n      return this;\n    }\n    if (navigator.userAgent.match(/(Android)/)) {\n      if (this.imageSrc && this.androidFix && !this.$element.is('img')) {\n        this.$element.css({\n          backgroundImage: 'url(' + this.imageSrc + ')',\n          backgroundSize: 'cover',\n          backgroundPosition: this.position\n        });\n      }\n      return this;\n    }\n    this.$mirror = $('<div />').prependTo(this.mirrorContainer);\n    var slider = this.$element.find('>.parallax-slider');\n    var sliderExisted = false;\n    if (slider.length == 0) this.$slider = $('<img />').prependTo(this.$mirror);else {\n      this.$slider = slider.prependTo(this.$mirror);\n      sliderExisted = true;\n    }\n    this.$mirror.addClass('parallax-mirror').css({\n      visibility: 'hidden',\n      zIndex: this.zIndex,\n      position: 'fixed',\n      top: 0,\n      left: 0,\n      overflow: 'hidden'\n    });\n    this.$slider.addClass('parallax-slider').one('load', function () {\n      if (!self.naturalHeight || !self.naturalWidth) {\n        self.naturalHeight = this.naturalHeight || this.height || 1;\n        self.naturalWidth = this.naturalWidth || this.width || 1;\n      }\n      self.aspectRatio = self.naturalWidth / self.naturalHeight;\n      Parallax.isSetup || Parallax.setup();\n      Parallax.sliders.push(self);\n      Parallax.isFresh = false;\n      Parallax.requestRender();\n    });\n    if (!sliderExisted) this.$slider[0].src = this.imageSrc;\n    if (this.naturalHeight && this.naturalWidth || this.$slider[0].complete || slider.length > 0) {\n      this.$slider.trigger('load');\n    }\n  }\n\n  // Parallax Instance Methods\n\n  $.extend(Parallax.prototype, {\n    speed: 0.2,\n    bleed: 0,\n    zIndex: -100,\n    iosFix: true,\n    androidFix: true,\n    position: 'center',\n    overScrollFix: false,\n    mirrorContainer: 'body',\n    refresh: function refresh() {\n      this.boxWidth = this.$element.outerWidth();\n      this.boxHeight = this.$element.outerHeight() + this.bleed * 2;\n      this.boxOffsetTop = this.$element.offset().top - this.bleed;\n      this.boxOffsetLeft = this.$element.offset().left;\n      this.boxOffsetBottom = this.boxOffsetTop + this.boxHeight;\n      var winHeight = Parallax.winHeight;\n      var docHeight = Parallax.docHeight;\n      var maxOffset = Math.min(this.boxOffsetTop, docHeight - winHeight);\n      var minOffset = Math.max(this.boxOffsetTop + this.boxHeight - winHeight, 0);\n      var imageHeightMin = this.boxHeight + (maxOffset - minOffset) * (1 - this.speed) | 0;\n      var imageOffsetMin = (this.boxOffsetTop - maxOffset) * (1 - this.speed) | 0;\n      var margin;\n      if (imageHeightMin * this.aspectRatio >= this.boxWidth) {\n        this.imageWidth = imageHeightMin * this.aspectRatio | 0;\n        this.imageHeight = imageHeightMin;\n        this.offsetBaseTop = imageOffsetMin;\n        margin = this.imageWidth - this.boxWidth;\n        if (this.positionX == 'left') {\n          this.offsetLeft = 0;\n        } else if (this.positionX == 'right') {\n          this.offsetLeft = -margin;\n        } else if (!isNaN(this.positionX)) {\n          this.offsetLeft = Math.max(this.positionX, -margin);\n        } else {\n          this.offsetLeft = -margin / 2 | 0;\n        }\n      } else {\n        this.imageWidth = this.boxWidth;\n        this.imageHeight = this.boxWidth / this.aspectRatio | 0;\n        this.offsetLeft = 0;\n        margin = this.imageHeight - imageHeightMin;\n        if (this.positionY == 'top') {\n          this.offsetBaseTop = imageOffsetMin;\n        } else if (this.positionY == 'bottom') {\n          this.offsetBaseTop = imageOffsetMin - margin;\n        } else if (!isNaN(this.positionY)) {\n          this.offsetBaseTop = imageOffsetMin + Math.max(this.positionY, -margin);\n        } else {\n          this.offsetBaseTop = imageOffsetMin - margin / 2 | 0;\n        }\n      }\n    },\n    render: function render() {\n      var scrollTop = Parallax.scrollTop;\n      var scrollLeft = Parallax.scrollLeft;\n      var overScroll = this.overScrollFix ? Parallax.overScroll : 0;\n      var scrollBottom = scrollTop + Parallax.winHeight;\n      if (this.boxOffsetBottom > scrollTop && this.boxOffsetTop <= scrollBottom) {\n        this.visibility = 'visible';\n        this.mirrorTop = this.boxOffsetTop - scrollTop;\n        this.mirrorLeft = this.boxOffsetLeft - scrollLeft;\n        this.offsetTop = this.offsetBaseTop - this.mirrorTop * (1 - this.speed);\n      } else {\n        this.visibility = 'hidden';\n      }\n      this.$mirror.css({\n        transform: 'translate3d(' + this.mirrorLeft + 'px, ' + (this.mirrorTop - overScroll) + 'px, 0px)',\n        visibility: this.visibility,\n        height: this.boxHeight,\n        width: this.boxWidth\n      });\n      this.$slider.css({\n        transform: 'translate3d(' + this.offsetLeft + 'px, ' + this.offsetTop + 'px, 0px)',\n        position: 'absolute',\n        height: this.imageHeight,\n        width: this.imageWidth,\n        maxWidth: 'none'\n      });\n    }\n  });\n\n  // Parallax Static Methods\n\n  $.extend(Parallax, {\n    scrollTop: 0,\n    scrollLeft: 0,\n    winHeight: 0,\n    winWidth: 0,\n    docHeight: 1 << 30,\n    docWidth: 1 << 30,\n    sliders: [],\n    isReady: false,\n    isFresh: false,\n    isBusy: false,\n    setup: function setup() {\n      if (this.isReady) return;\n      var self = this;\n      var $doc = $(document),\n        $win = $(window);\n      var loadDimensions = function loadDimensions() {\n        Parallax.winHeight = $win.height();\n        Parallax.winWidth = $win.width();\n        Parallax.docHeight = $doc.height();\n        Parallax.docWidth = $doc.width();\n      };\n      var loadScrollPosition = function loadScrollPosition() {\n        var winScrollTop = $win.scrollTop();\n        var scrollTopMax = Parallax.docHeight - Parallax.winHeight;\n        var scrollLeftMax = Parallax.docWidth - Parallax.winWidth;\n        Parallax.scrollTop = Math.max(0, Math.min(scrollTopMax, winScrollTop));\n        Parallax.scrollLeft = Math.max(0, Math.min(scrollLeftMax, $win.scrollLeft()));\n        Parallax.overScroll = Math.max(winScrollTop - scrollTopMax, Math.min(winScrollTop, 0));\n      };\n      $win.on('resize.px.parallax load.px.parallax', function () {\n        loadDimensions();\n        self.refresh();\n        Parallax.isFresh = false;\n        Parallax.requestRender();\n      }).on('scroll.px.parallax load.px.parallax', function () {\n        loadScrollPosition();\n        Parallax.requestRender();\n      });\n      loadDimensions();\n      loadScrollPosition();\n      this.isReady = true;\n      var lastPosition = -1;\n      function frameLoop() {\n        if (lastPosition == window.pageYOffset) {\n          // Avoid overcalculations\n          window.requestAnimationFrame(frameLoop);\n          return false;\n        } else lastPosition = window.pageYOffset;\n        self.render();\n        window.requestAnimationFrame(frameLoop);\n      }\n      frameLoop();\n    },\n    configure: function configure(options) {\n      if (_typeof(options) == 'object') {\n        delete options.refresh;\n        delete options.render;\n        $.extend(this.prototype, options);\n      }\n    },\n    refresh: function refresh() {\n      $.each(this.sliders, function () {\n        this.refresh();\n      });\n      this.isFresh = true;\n    },\n    render: function render() {\n      this.isFresh || this.refresh();\n      $.each(this.sliders, function () {\n        this.render();\n      });\n    },\n    requestRender: function requestRender() {\n      var self = this;\n      self.render();\n      self.isBusy = false;\n    },\n    destroy: function destroy(el) {\n      var i,\n        parallaxElement = $(el).data('px.parallax');\n      parallaxElement.$mirror.remove();\n      for (i = 0; i < this.sliders.length; i += 1) {\n        if (this.sliders[i] == parallaxElement) {\n          this.sliders.splice(i, 1);\n        }\n      }\n      $(el).data('px.parallax', false);\n      if (this.sliders.length === 0) {\n        $(window).off('scroll.px.parallax resize.px.parallax load.px.parallax');\n        this.isReady = false;\n        Parallax.isSetup = false;\n      }\n    }\n  });\n\n  // Parallax Plugin Definition\n\n  function Plugin(option) {\n    return this.each(function () {\n      var $this = $(this);\n      var options = _typeof(option) == 'object' && option;\n      if (this == window || this == document || $this.is('body')) {\n        Parallax.configure(options);\n      } else if (!$this.data('px.parallax')) {\n        options = $.extend({}, $this.data(), options);\n        $this.data('px.parallax', new Parallax(this, options));\n      } else if (_typeof(option) == 'object') {\n        $.extend($this.data('px.parallax'), options);\n      }\n      if (typeof option == 'string') {\n        if (option == 'destroy') {\n          Parallax.destroy(this);\n        } else {\n          Parallax[option]();\n        }\n      }\n    });\n  }\n  var old = $.fn.parallax;\n  $.fn.parallax = Plugin;\n  $.fn.parallax.Constructor = Parallax;\n\n  // Parallax No Conflict\n\n  $.fn.parallax.noConflict = function () {\n    $.fn.parallax = old;\n    return this;\n  };\n\n  // Parallax Data-API\n\n  $(function () {\n    $('[data-parallax=\"scroll\"]').parallax();\n  });\n})(jQuery, window, document);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyIkIiwid2luZG93IiwiZG9jdW1lbnQiLCJ1bmRlZmluZWQiLCJsYXN0VGltZSIsInZlbmRvcnMiLCJ4IiwibGVuZ3RoIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJjYWxsYmFjayIsImN1cnJUaW1lIiwiRGF0ZSIsImdldFRpbWUiLCJ0aW1lVG9DYWxsIiwiTWF0aCIsIm1heCIsImlkIiwic2V0VGltZW91dCIsImNsZWFyVGltZW91dCIsIlBhcmFsbGF4IiwiZWxlbWVudCIsIm9wdGlvbnMiLCJzZWxmIiwiX3R5cGVvZiIsInJlZnJlc2giLCJyZW5kZXIiLCJleHRlbmQiLCIkZWxlbWVudCIsImltYWdlU3JjIiwiaXMiLCJhdHRyIiwicG9zaXRpb25zIiwicG9zaXRpb24iLCJ0b0xvd2VyQ2FzZSIsIm1hdGNoIiwicHVzaCIsInBvc2l0aW9uWCIsInBvc2l0aW9uWSIsImlzTmFOIiwicGFyc2VJbnQiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJpb3NGaXgiLCJjc3MiLCJiYWNrZ3JvdW5kSW1hZ2UiLCJiYWNrZ3JvdW5kU2l6ZSIsImJhY2tncm91bmRQb3NpdGlvbiIsImFuZHJvaWRGaXgiLCIkbWlycm9yIiwicHJlcGVuZFRvIiwibWlycm9yQ29udGFpbmVyIiwic2xpZGVyIiwiZmluZCIsInNsaWRlckV4aXN0ZWQiLCIkc2xpZGVyIiwiYWRkQ2xhc3MiLCJ2aXNpYmlsaXR5IiwiekluZGV4IiwidG9wIiwibGVmdCIsIm92ZXJmbG93Iiwib25lIiwibmF0dXJhbEhlaWdodCIsIm5hdHVyYWxXaWR0aCIsImhlaWdodCIsIndpZHRoIiwiYXNwZWN0UmF0aW8iLCJpc1NldHVwIiwic2V0dXAiLCJzbGlkZXJzIiwiaXNGcmVzaCIsInJlcXVlc3RSZW5kZXIiLCJzcmMiLCJjb21wbGV0ZSIsInRyaWdnZXIiLCJwcm90b3R5cGUiLCJzcGVlZCIsImJsZWVkIiwib3ZlclNjcm9sbEZpeCIsImJveFdpZHRoIiwib3V0ZXJXaWR0aCIsImJveEhlaWdodCIsIm91dGVySGVpZ2h0IiwiYm94T2Zmc2V0VG9wIiwib2Zmc2V0IiwiYm94T2Zmc2V0TGVmdCIsImJveE9mZnNldEJvdHRvbSIsIndpbkhlaWdodCIsImRvY0hlaWdodCIsIm1heE9mZnNldCIsIm1pbiIsIm1pbk9mZnNldCIsImltYWdlSGVpZ2h0TWluIiwiaW1hZ2VPZmZzZXRNaW4iLCJtYXJnaW4iLCJpbWFnZVdpZHRoIiwiaW1hZ2VIZWlnaHQiLCJvZmZzZXRCYXNlVG9wIiwib2Zmc2V0TGVmdCIsInNjcm9sbFRvcCIsInNjcm9sbExlZnQiLCJvdmVyU2Nyb2xsIiwic2Nyb2xsQm90dG9tIiwibWlycm9yVG9wIiwibWlycm9yTGVmdCIsIm9mZnNldFRvcCIsInRyYW5zZm9ybSIsIm1heFdpZHRoIiwid2luV2lkdGgiLCJkb2NXaWR0aCIsImlzUmVhZHkiLCJpc0J1c3kiLCIkZG9jIiwiJHdpbiIsImxvYWREaW1lbnNpb25zIiwibG9hZFNjcm9sbFBvc2l0aW9uIiwid2luU2Nyb2xsVG9wIiwic2Nyb2xsVG9wTWF4Iiwic2Nyb2xsTGVmdE1heCIsIm9uIiwibGFzdFBvc2l0aW9uIiwiZnJhbWVMb29wIiwicGFnZVlPZmZzZXQiLCJjb25maWd1cmUiLCJlYWNoIiwiZGVzdHJveSIsImVsIiwiaSIsInBhcmFsbGF4RWxlbWVudCIsImRhdGEiLCJyZW1vdmUiLCJzcGxpY2UiLCJvZmYiLCJQbHVnaW4iLCJvcHRpb24iLCIkdGhpcyIsIm9sZCIsImZuIiwicGFyYWxsYXgiLCJDb25zdHJ1Y3RvciIsIm5vQ29uZmxpY3QiLCJqUXVlcnkiXSwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2pzL3BhcmFsbGF4LmpzP2I4ODEiXSwic291cmNlc0NvbnRlbnQiOlsiLyohXHJcbiAqIHBhcmFsbGF4LmpzIHYxLjUuMCAoaHR0cDovL3BpeGVsY29nLmdpdGh1Yi5pby9wYXJhbGxheC5qcy8pXHJcbiAqIEBjb3B5cmlnaHQgMjAxNiBQaXhlbENvZywgSW5jLlxyXG4gKiBAbGljZW5zZSBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS9waXhlbGNvZy9wYXJhbGxheC5qcy9ibG9iL21hc3Rlci9MSUNFTlNFKVxyXG4gKi9cclxuXHJcbjsoZnVuY3Rpb24gKCAkLCB3aW5kb3csIGRvY3VtZW50LCB1bmRlZmluZWQgKSB7XHJcblxyXG4gIC8vIFBvbHlmaWxsIGZvciByZXF1ZXN0QW5pbWF0aW9uRnJhbWVcclxuICAvLyB2aWE6IGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL3BhdWxpcmlzaC8xNTc5NjcxXHJcblxyXG4gIChmdW5jdGlvbigpIHtcclxuICAgIHZhciBsYXN0VGltZSA9IDA7XHJcbiAgICB2YXIgdmVuZG9ycyA9IFsnbXMnLCAnbW96JywgJ3dlYmtpdCcsICdvJ107XHJcbiAgICBmb3IodmFyIHggPSAwOyB4IDwgdmVuZG9ycy5sZW5ndGggJiYgIXdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWU7ICsreCkge1xyXG4gICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lID0gd2luZG93W3ZlbmRvcnNbeF0rJ1JlcXVlc3RBbmltYXRpb25GcmFtZSddO1xyXG4gICAgICB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUgPSB3aW5kb3dbdmVuZG9yc1t4XSsnQ2FuY2VsQW5pbWF0aW9uRnJhbWUnXSB8fCB3aW5kb3dbdmVuZG9yc1t4XSsnQ2FuY2VsUmVxdWVzdEFuaW1hdGlvbkZyYW1lJ107XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCF3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKVxyXG4gICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lID0gZnVuY3Rpb24oY2FsbGJhY2spIHtcclxuICAgICAgICB2YXIgY3VyclRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcclxuICAgICAgICB2YXIgdGltZVRvQ2FsbCA9IE1hdGgubWF4KDAsIDE2IC0gKGN1cnJUaW1lIC0gbGFzdFRpbWUpKTtcclxuICAgICAgICB2YXIgaWQgPSB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbigpIHsgY2FsbGJhY2soY3VyclRpbWUgKyB0aW1lVG9DYWxsKTsgfSxcclxuICAgICAgICAgIHRpbWVUb0NhbGwpO1xyXG4gICAgICAgIGxhc3RUaW1lID0gY3VyclRpbWUgKyB0aW1lVG9DYWxsO1xyXG4gICAgICAgIHJldHVybiBpZDtcclxuICAgICAgfTtcclxuXHJcbiAgICBpZiAoIXdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSlcclxuICAgICAgd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lID0gZnVuY3Rpb24oaWQpIHtcclxuICAgICAgICBjbGVhclRpbWVvdXQoaWQpO1xyXG4gICAgICB9O1xyXG4gIH0oKSk7XHJcblxyXG5cclxuICAvLyBQYXJhbGxheCBDb25zdHJ1Y3RvclxyXG5cclxuICBmdW5jdGlvbiBQYXJhbGxheChlbGVtZW50LCBvcHRpb25zKSB7XHJcbiAgICB2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zID09ICdvYmplY3QnKSB7XHJcbiAgICAgIGRlbGV0ZSBvcHRpb25zLnJlZnJlc2g7XHJcbiAgICAgIGRlbGV0ZSBvcHRpb25zLnJlbmRlcjtcclxuICAgICAgJC5leHRlbmQodGhpcywgb3B0aW9ucyk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy4kZWxlbWVudCA9ICQoZWxlbWVudCk7XHJcblxyXG4gICAgaWYgKCF0aGlzLmltYWdlU3JjICYmIHRoaXMuJGVsZW1lbnQuaXMoJ2ltZycpKSB7XHJcbiAgICAgIHRoaXMuaW1hZ2VTcmMgPSB0aGlzLiRlbGVtZW50LmF0dHIoJ3NyYycpO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciBwb3NpdGlvbnMgPSAodGhpcy5wb3NpdGlvbiArICcnKS50b0xvd2VyQ2FzZSgpLm1hdGNoKC9cXFMrL2cpIHx8IFtdO1xyXG5cclxuICAgIGlmIChwb3NpdGlvbnMubGVuZ3RoIDwgMSkge1xyXG4gICAgICBwb3NpdGlvbnMucHVzaCgnY2VudGVyJyk7XHJcbiAgICB9XHJcbiAgICBpZiAocG9zaXRpb25zLmxlbmd0aCA9PSAxKSB7XHJcbiAgICAgIHBvc2l0aW9ucy5wdXNoKHBvc2l0aW9uc1swXSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHBvc2l0aW9uc1swXSA9PSAndG9wJyB8fCBwb3NpdGlvbnNbMF0gPT0gJ2JvdHRvbScgfHwgcG9zaXRpb25zWzFdID09ICdsZWZ0JyB8fCBwb3NpdGlvbnNbMV0gPT0gJ3JpZ2h0Jykge1xyXG4gICAgICBwb3NpdGlvbnMgPSBbcG9zaXRpb25zWzFdLCBwb3NpdGlvbnNbMF1dO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0aGlzLnBvc2l0aW9uWCAhPT0gdW5kZWZpbmVkKSBwb3NpdGlvbnNbMF0gPSB0aGlzLnBvc2l0aW9uWC50b0xvd2VyQ2FzZSgpO1xyXG4gICAgaWYgKHRoaXMucG9zaXRpb25ZICE9PSB1bmRlZmluZWQpIHBvc2l0aW9uc1sxXSA9IHRoaXMucG9zaXRpb25ZLnRvTG93ZXJDYXNlKCk7XHJcblxyXG4gICAgc2VsZi5wb3NpdGlvblggPSBwb3NpdGlvbnNbMF07XHJcbiAgICBzZWxmLnBvc2l0aW9uWSA9IHBvc2l0aW9uc1sxXTtcclxuXHJcbiAgICBpZiAodGhpcy5wb3NpdGlvblggIT0gJ2xlZnQnICYmIHRoaXMucG9zaXRpb25YICE9ICdyaWdodCcpIHtcclxuICAgICAgaWYgKGlzTmFOKHBhcnNlSW50KHRoaXMucG9zaXRpb25YKSkpIHtcclxuICAgICAgICB0aGlzLnBvc2l0aW9uWCA9ICdjZW50ZXInO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRoaXMucG9zaXRpb25YID0gcGFyc2VJbnQodGhpcy5wb3NpdGlvblgpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMucG9zaXRpb25ZICE9ICd0b3AnICYmIHRoaXMucG9zaXRpb25ZICE9ICdib3R0b20nKSB7XHJcbiAgICAgIGlmIChpc05hTihwYXJzZUludCh0aGlzLnBvc2l0aW9uWSkpKSB7XHJcbiAgICAgICAgdGhpcy5wb3NpdGlvblkgPSAnY2VudGVyJztcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0aGlzLnBvc2l0aW9uWSA9IHBhcnNlSW50KHRoaXMucG9zaXRpb25ZKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHRoaXMucG9zaXRpb24gPVxyXG4gICAgICB0aGlzLnBvc2l0aW9uWCArIChpc05hTih0aGlzLnBvc2l0aW9uWCk/ICcnIDogJ3B4JykgKyAnICcgK1xyXG4gICAgICB0aGlzLnBvc2l0aW9uWSArIChpc05hTih0aGlzLnBvc2l0aW9uWSk/ICcnIDogJ3B4Jyk7XHJcblxyXG4gICAgaWYgKG5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goLyhpUG9kfGlQaG9uZXxpUGFkKS8pKSB7XHJcbiAgICAgIGlmICh0aGlzLmltYWdlU3JjICYmIHRoaXMuaW9zRml4ICYmICF0aGlzLiRlbGVtZW50LmlzKCdpbWcnKSkge1xyXG4gICAgICAgIHRoaXMuJGVsZW1lbnQuY3NzKHtcclxuICAgICAgICAgIGJhY2tncm91bmRJbWFnZTogJ3VybCgnICsgdGhpcy5pbWFnZVNyYyArICcpJyxcclxuICAgICAgICAgIGJhY2tncm91bmRTaXplOiAnY292ZXInLFxyXG4gICAgICAgICAgYmFja2dyb3VuZFBvc2l0aW9uOiB0aGlzLnBvc2l0aW9uXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKG5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goLyhBbmRyb2lkKS8pKSB7XHJcbiAgICAgIGlmICh0aGlzLmltYWdlU3JjICYmIHRoaXMuYW5kcm9pZEZpeCAmJiAhdGhpcy4kZWxlbWVudC5pcygnaW1nJykpIHtcclxuICAgICAgICB0aGlzLiRlbGVtZW50LmNzcyh7XHJcbiAgICAgICAgICBiYWNrZ3JvdW5kSW1hZ2U6ICd1cmwoJyArIHRoaXMuaW1hZ2VTcmMgKyAnKScsXHJcbiAgICAgICAgICBiYWNrZ3JvdW5kU2l6ZTogJ2NvdmVyJyxcclxuICAgICAgICAgIGJhY2tncm91bmRQb3NpdGlvbjogdGhpcy5wb3NpdGlvblxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuJG1pcnJvciA9ICQoJzxkaXYgLz4nKS5wcmVwZW5kVG8odGhpcy5taXJyb3JDb250YWluZXIpO1xyXG5cclxuICAgIHZhciBzbGlkZXIgPSB0aGlzLiRlbGVtZW50LmZpbmQoJz4ucGFyYWxsYXgtc2xpZGVyJyk7XHJcbiAgICB2YXIgc2xpZGVyRXhpc3RlZCA9IGZhbHNlO1xyXG5cclxuICAgIGlmIChzbGlkZXIubGVuZ3RoID09IDApXHJcbiAgICAgIHRoaXMuJHNsaWRlciA9ICQoJzxpbWcgLz4nKS5wcmVwZW5kVG8odGhpcy4kbWlycm9yKTtcclxuICAgIGVsc2Uge1xyXG4gICAgICB0aGlzLiRzbGlkZXIgPSBzbGlkZXIucHJlcGVuZFRvKHRoaXMuJG1pcnJvcilcclxuICAgICAgc2xpZGVyRXhpc3RlZCA9IHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy4kbWlycm9yLmFkZENsYXNzKCdwYXJhbGxheC1taXJyb3InKS5jc3Moe1xyXG4gICAgICB2aXNpYmlsaXR5OiAnaGlkZGVuJyxcclxuICAgICAgekluZGV4OiB0aGlzLnpJbmRleCxcclxuICAgICAgcG9zaXRpb246ICdmaXhlZCcsXHJcbiAgICAgIHRvcDogMCxcclxuICAgICAgbGVmdDogMCxcclxuICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nXHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGlzLiRzbGlkZXIuYWRkQ2xhc3MoJ3BhcmFsbGF4LXNsaWRlcicpLm9uZSgnbG9hZCcsIGZ1bmN0aW9uKCkge1xyXG4gICAgICBpZiAoIXNlbGYubmF0dXJhbEhlaWdodCB8fCAhc2VsZi5uYXR1cmFsV2lkdGgpIHtcclxuICAgICAgICBzZWxmLm5hdHVyYWxIZWlnaHQgPSB0aGlzLm5hdHVyYWxIZWlnaHQgfHwgdGhpcy5oZWlnaHQgfHwgMTtcclxuICAgICAgICBzZWxmLm5hdHVyYWxXaWR0aCAgPSB0aGlzLm5hdHVyYWxXaWR0aCAgfHwgdGhpcy53aWR0aCAgfHwgMTtcclxuICAgICAgfVxyXG4gICAgICBzZWxmLmFzcGVjdFJhdGlvID0gc2VsZi5uYXR1cmFsV2lkdGggLyBzZWxmLm5hdHVyYWxIZWlnaHQ7XHJcblxyXG4gICAgICBQYXJhbGxheC5pc1NldHVwIHx8IFBhcmFsbGF4LnNldHVwKCk7XHJcbiAgICAgIFBhcmFsbGF4LnNsaWRlcnMucHVzaChzZWxmKTtcclxuICAgICAgUGFyYWxsYXguaXNGcmVzaCA9IGZhbHNlO1xyXG4gICAgICBQYXJhbGxheC5yZXF1ZXN0UmVuZGVyKCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpZiAoIXNsaWRlckV4aXN0ZWQpXHJcbiAgICAgIHRoaXMuJHNsaWRlclswXS5zcmMgPSB0aGlzLmltYWdlU3JjO1xyXG5cclxuICAgIGlmICh0aGlzLm5hdHVyYWxIZWlnaHQgJiYgdGhpcy5uYXR1cmFsV2lkdGggfHwgdGhpcy4kc2xpZGVyWzBdLmNvbXBsZXRlIHx8IHNsaWRlci5sZW5ndGggPiAwKSB7XHJcbiAgICAgIHRoaXMuJHNsaWRlci50cmlnZ2VyKCdsb2FkJyk7XHJcbiAgICB9XHJcblxyXG4gIH1cclxuXHJcblxyXG4gIC8vIFBhcmFsbGF4IEluc3RhbmNlIE1ldGhvZHNcclxuXHJcbiAgJC5leHRlbmQoUGFyYWxsYXgucHJvdG90eXBlLCB7XHJcbiAgICBzcGVlZDogICAgMC4yLFxyXG4gICAgYmxlZWQ6ICAgIDAsXHJcbiAgICB6SW5kZXg6ICAgLTEwMCxcclxuICAgIGlvc0ZpeDogICB0cnVlLFxyXG4gICAgYW5kcm9pZEZpeDogdHJ1ZSxcclxuICAgIHBvc2l0aW9uOiAnY2VudGVyJyxcclxuICAgIG92ZXJTY3JvbGxGaXg6IGZhbHNlLFxyXG4gICAgbWlycm9yQ29udGFpbmVyOiAnYm9keScsXHJcblxyXG4gICAgcmVmcmVzaDogZnVuY3Rpb24oKSB7XHJcbiAgICAgIHRoaXMuYm94V2lkdGggICAgICAgID0gdGhpcy4kZWxlbWVudC5vdXRlcldpZHRoKCk7XHJcbiAgICAgIHRoaXMuYm94SGVpZ2h0ICAgICAgID0gdGhpcy4kZWxlbWVudC5vdXRlckhlaWdodCgpICsgdGhpcy5ibGVlZCAqIDI7XHJcbiAgICAgIHRoaXMuYm94T2Zmc2V0VG9wICAgID0gdGhpcy4kZWxlbWVudC5vZmZzZXQoKS50b3AgLSB0aGlzLmJsZWVkO1xyXG4gICAgICB0aGlzLmJveE9mZnNldExlZnQgICA9IHRoaXMuJGVsZW1lbnQub2Zmc2V0KCkubGVmdDtcclxuICAgICAgdGhpcy5ib3hPZmZzZXRCb3R0b20gPSB0aGlzLmJveE9mZnNldFRvcCArIHRoaXMuYm94SGVpZ2h0O1xyXG5cclxuICAgICAgdmFyIHdpbkhlaWdodCA9IFBhcmFsbGF4LndpbkhlaWdodDtcclxuICAgICAgdmFyIGRvY0hlaWdodCA9IFBhcmFsbGF4LmRvY0hlaWdodDtcclxuICAgICAgdmFyIG1heE9mZnNldCA9IE1hdGgubWluKHRoaXMuYm94T2Zmc2V0VG9wLCBkb2NIZWlnaHQgLSB3aW5IZWlnaHQpO1xyXG4gICAgICB2YXIgbWluT2Zmc2V0ID0gTWF0aC5tYXgodGhpcy5ib3hPZmZzZXRUb3AgKyB0aGlzLmJveEhlaWdodCAtIHdpbkhlaWdodCwgMCk7XHJcbiAgICAgIHZhciBpbWFnZUhlaWdodE1pbiA9IHRoaXMuYm94SGVpZ2h0ICsgKG1heE9mZnNldCAtIG1pbk9mZnNldCkgKiAoMSAtIHRoaXMuc3BlZWQpIHwgMDtcclxuICAgICAgdmFyIGltYWdlT2Zmc2V0TWluID0gKHRoaXMuYm94T2Zmc2V0VG9wIC0gbWF4T2Zmc2V0KSAqICgxIC0gdGhpcy5zcGVlZCkgfCAwO1xyXG4gICAgICB2YXIgbWFyZ2luO1xyXG5cclxuICAgICAgaWYgKGltYWdlSGVpZ2h0TWluICogdGhpcy5hc3BlY3RSYXRpbyA+PSB0aGlzLmJveFdpZHRoKSB7XHJcbiAgICAgICAgdGhpcy5pbWFnZVdpZHRoICAgID0gaW1hZ2VIZWlnaHRNaW4gKiB0aGlzLmFzcGVjdFJhdGlvIHwgMDtcclxuICAgICAgICB0aGlzLmltYWdlSGVpZ2h0ICAgPSBpbWFnZUhlaWdodE1pbjtcclxuICAgICAgICB0aGlzLm9mZnNldEJhc2VUb3AgPSBpbWFnZU9mZnNldE1pbjtcclxuXHJcbiAgICAgICAgbWFyZ2luID0gdGhpcy5pbWFnZVdpZHRoIC0gdGhpcy5ib3hXaWR0aDtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMucG9zaXRpb25YID09ICdsZWZ0Jykge1xyXG4gICAgICAgICAgdGhpcy5vZmZzZXRMZWZ0ID0gMDtcclxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMucG9zaXRpb25YID09ICdyaWdodCcpIHtcclxuICAgICAgICAgIHRoaXMub2Zmc2V0TGVmdCA9IC0gbWFyZ2luO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoIWlzTmFOKHRoaXMucG9zaXRpb25YKSkge1xyXG4gICAgICAgICAgdGhpcy5vZmZzZXRMZWZ0ID0gTWF0aC5tYXgodGhpcy5wb3NpdGlvblgsIC0gbWFyZ2luKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgdGhpcy5vZmZzZXRMZWZ0ID0gLSBtYXJnaW4gLyAyIHwgMDtcclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhpcy5pbWFnZVdpZHRoICAgID0gdGhpcy5ib3hXaWR0aDtcclxuICAgICAgICB0aGlzLmltYWdlSGVpZ2h0ICAgPSB0aGlzLmJveFdpZHRoIC8gdGhpcy5hc3BlY3RSYXRpbyB8IDA7XHJcbiAgICAgICAgdGhpcy5vZmZzZXRMZWZ0ICAgID0gMDtcclxuXHJcbiAgICAgICAgbWFyZ2luID0gdGhpcy5pbWFnZUhlaWdodCAtIGltYWdlSGVpZ2h0TWluO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5wb3NpdGlvblkgPT0gJ3RvcCcpIHtcclxuICAgICAgICAgIHRoaXMub2Zmc2V0QmFzZVRvcCA9IGltYWdlT2Zmc2V0TWluO1xyXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5wb3NpdGlvblkgPT0gJ2JvdHRvbScpIHtcclxuICAgICAgICAgIHRoaXMub2Zmc2V0QmFzZVRvcCA9IGltYWdlT2Zmc2V0TWluIC0gbWFyZ2luO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoIWlzTmFOKHRoaXMucG9zaXRpb25ZKSkge1xyXG4gICAgICAgICAgdGhpcy5vZmZzZXRCYXNlVG9wID0gaW1hZ2VPZmZzZXRNaW4gKyBNYXRoLm1heCh0aGlzLnBvc2l0aW9uWSwgLSBtYXJnaW4pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB0aGlzLm9mZnNldEJhc2VUb3AgPSBpbWFnZU9mZnNldE1pbiAtIG1hcmdpbiAvIDIgfCAwO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICByZW5kZXI6IGZ1bmN0aW9uKCkge1xyXG4gICAgICB2YXIgc2Nyb2xsVG9wICAgID0gUGFyYWxsYXguc2Nyb2xsVG9wO1xyXG4gICAgICB2YXIgc2Nyb2xsTGVmdCAgID0gUGFyYWxsYXguc2Nyb2xsTGVmdDtcclxuICAgICAgdmFyIG92ZXJTY3JvbGwgICA9IHRoaXMub3ZlclNjcm9sbEZpeCA/IFBhcmFsbGF4Lm92ZXJTY3JvbGwgOiAwO1xyXG4gICAgICB2YXIgc2Nyb2xsQm90dG9tID0gc2Nyb2xsVG9wICsgUGFyYWxsYXgud2luSGVpZ2h0O1xyXG5cclxuICAgICAgaWYgKHRoaXMuYm94T2Zmc2V0Qm90dG9tID4gc2Nyb2xsVG9wICYmIHRoaXMuYm94T2Zmc2V0VG9wIDw9IHNjcm9sbEJvdHRvbSkge1xyXG4gICAgICAgIHRoaXMudmlzaWJpbGl0eSA9ICd2aXNpYmxlJztcclxuICAgICAgICB0aGlzLm1pcnJvclRvcCA9IHRoaXMuYm94T2Zmc2V0VG9wICAtIHNjcm9sbFRvcDtcclxuICAgICAgICB0aGlzLm1pcnJvckxlZnQgPSB0aGlzLmJveE9mZnNldExlZnQgLSBzY3JvbGxMZWZ0O1xyXG4gICAgICAgIHRoaXMub2Zmc2V0VG9wID0gdGhpcy5vZmZzZXRCYXNlVG9wIC0gdGhpcy5taXJyb3JUb3AgKiAoMSAtIHRoaXMuc3BlZWQpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRoaXMudmlzaWJpbGl0eSA9ICdoaWRkZW4nO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB0aGlzLiRtaXJyb3IuY3NzKHtcclxuICAgICAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGUzZCgnK3RoaXMubWlycm9yTGVmdCsncHgsICcrKHRoaXMubWlycm9yVG9wIC0gb3ZlclNjcm9sbCkrJ3B4LCAwcHgpJyxcclxuICAgICAgICB2aXNpYmlsaXR5OiB0aGlzLnZpc2liaWxpdHksXHJcbiAgICAgICAgaGVpZ2h0OiB0aGlzLmJveEhlaWdodCxcclxuICAgICAgICB3aWR0aDogdGhpcy5ib3hXaWR0aFxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIHRoaXMuJHNsaWRlci5jc3Moe1xyXG4gICAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZTNkKCcrdGhpcy5vZmZzZXRMZWZ0KydweCwgJyt0aGlzLm9mZnNldFRvcCsncHgsIDBweCknLFxyXG4gICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxyXG4gICAgICAgIGhlaWdodDogdGhpcy5pbWFnZUhlaWdodCxcclxuICAgICAgICB3aWR0aDogdGhpcy5pbWFnZVdpZHRoLFxyXG4gICAgICAgIG1heFdpZHRoOiAnbm9uZSdcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfSk7XHJcblxyXG5cclxuICAvLyBQYXJhbGxheCBTdGF0aWMgTWV0aG9kc1xyXG5cclxuICAkLmV4dGVuZChQYXJhbGxheCwge1xyXG4gICAgc2Nyb2xsVG9wOiAgICAwLFxyXG4gICAgc2Nyb2xsTGVmdDogICAwLFxyXG4gICAgd2luSGVpZ2h0OiAgICAwLFxyXG4gICAgd2luV2lkdGg6ICAgICAwLFxyXG4gICAgZG9jSGVpZ2h0OiAgICAxIDw8IDMwLFxyXG4gICAgZG9jV2lkdGg6ICAgICAxIDw8IDMwLFxyXG4gICAgc2xpZGVyczogICAgICBbXSxcclxuICAgIGlzUmVhZHk6ICAgICAgZmFsc2UsXHJcbiAgICBpc0ZyZXNoOiAgICAgIGZhbHNlLFxyXG4gICAgaXNCdXN5OiAgICAgICBmYWxzZSxcclxuXHJcbiAgICBzZXR1cDogZnVuY3Rpb24oKSB7XHJcbiAgICAgIGlmICh0aGlzLmlzUmVhZHkpIHJldHVybjtcclxuXHJcbiAgICAgIHZhciBzZWxmID0gdGhpcztcclxuXHJcbiAgICAgIHZhciAkZG9jID0gJChkb2N1bWVudCksICR3aW4gPSAkKHdpbmRvdyk7XHJcblxyXG4gICAgICB2YXIgbG9hZERpbWVuc2lvbnMgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICBQYXJhbGxheC53aW5IZWlnaHQgPSAkd2luLmhlaWdodCgpO1xyXG4gICAgICAgIFBhcmFsbGF4LndpbldpZHRoICA9ICR3aW4ud2lkdGgoKTtcclxuICAgICAgICBQYXJhbGxheC5kb2NIZWlnaHQgPSAkZG9jLmhlaWdodCgpO1xyXG4gICAgICAgIFBhcmFsbGF4LmRvY1dpZHRoICA9ICRkb2Mud2lkdGgoKTtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIHZhciBsb2FkU2Nyb2xsUG9zaXRpb24gPSBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgd2luU2Nyb2xsVG9wICA9ICR3aW4uc2Nyb2xsVG9wKCk7XHJcbiAgICAgICAgdmFyIHNjcm9sbFRvcE1heCAgPSBQYXJhbGxheC5kb2NIZWlnaHQgLSBQYXJhbGxheC53aW5IZWlnaHQ7XHJcbiAgICAgICAgdmFyIHNjcm9sbExlZnRNYXggPSBQYXJhbGxheC5kb2NXaWR0aCAgLSBQYXJhbGxheC53aW5XaWR0aDtcclxuICAgICAgICBQYXJhbGxheC5zY3JvbGxUb3AgID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oc2Nyb2xsVG9wTWF4LCAgd2luU2Nyb2xsVG9wKSk7XHJcbiAgICAgICAgUGFyYWxsYXguc2Nyb2xsTGVmdCA9IE1hdGgubWF4KDAsIE1hdGgubWluKHNjcm9sbExlZnRNYXgsICR3aW4uc2Nyb2xsTGVmdCgpKSk7XHJcbiAgICAgICAgUGFyYWxsYXgub3ZlclNjcm9sbCA9IE1hdGgubWF4KHdpblNjcm9sbFRvcCAtIHNjcm9sbFRvcE1heCwgTWF0aC5taW4od2luU2Nyb2xsVG9wLCAwKSk7XHJcbiAgICAgIH07XHJcblxyXG4gICAgICAkd2luLm9uKCdyZXNpemUucHgucGFyYWxsYXggbG9hZC5weC5wYXJhbGxheCcsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgbG9hZERpbWVuc2lvbnMoKTtcclxuICAgICAgICAgIHNlbGYucmVmcmVzaCgpO1xyXG4gICAgICAgICAgUGFyYWxsYXguaXNGcmVzaCA9IGZhbHNlO1xyXG4gICAgICAgICAgUGFyYWxsYXgucmVxdWVzdFJlbmRlcigpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLm9uKCdzY3JvbGwucHgucGFyYWxsYXggbG9hZC5weC5wYXJhbGxheCcsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgbG9hZFNjcm9sbFBvc2l0aW9uKCk7XHJcbiAgICAgICAgICBQYXJhbGxheC5yZXF1ZXN0UmVuZGVyKCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICBsb2FkRGltZW5zaW9ucygpO1xyXG4gICAgICBsb2FkU2Nyb2xsUG9zaXRpb24oKTtcclxuXHJcbiAgICAgIHRoaXMuaXNSZWFkeSA9IHRydWU7XHJcblxyXG4gICAgICB2YXIgbGFzdFBvc2l0aW9uID0gLTE7XHJcblxyXG4gICAgICBmdW5jdGlvbiBmcmFtZUxvb3AoKSB7XHJcbiAgICAgICAgaWYgKGxhc3RQb3NpdGlvbiA9PSB3aW5kb3cucGFnZVlPZmZzZXQpIHsgICAvLyBBdm9pZCBvdmVyY2FsY3VsYXRpb25zXHJcbiAgICAgICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZyYW1lTG9vcCk7XHJcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfSBlbHNlIGxhc3RQb3NpdGlvbiA9IHdpbmRvdy5wYWdlWU9mZnNldDtcclxuXHJcbiAgICAgICAgc2VsZi5yZW5kZXIoKTtcclxuICAgICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZyYW1lTG9vcCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGZyYW1lTG9vcCgpO1xyXG4gICAgfSxcclxuXHJcbiAgICBjb25maWd1cmU6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcclxuICAgICAgaWYgKHR5cGVvZiBvcHRpb25zID09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgZGVsZXRlIG9wdGlvbnMucmVmcmVzaDtcclxuICAgICAgICBkZWxldGUgb3B0aW9ucy5yZW5kZXI7XHJcbiAgICAgICAgJC5leHRlbmQodGhpcy5wcm90b3R5cGUsIG9wdGlvbnMpO1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIHJlZnJlc2g6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAkLmVhY2godGhpcy5zbGlkZXJzLCBmdW5jdGlvbigpeyB0aGlzLnJlZnJlc2goKTsgfSk7XHJcbiAgICAgIHRoaXMuaXNGcmVzaCA9IHRydWU7XHJcbiAgICB9LFxyXG5cclxuICAgIHJlbmRlcjogZnVuY3Rpb24oKSB7XHJcbiAgICAgIHRoaXMuaXNGcmVzaCB8fCB0aGlzLnJlZnJlc2goKTtcclxuICAgICAgJC5lYWNoKHRoaXMuc2xpZGVycywgZnVuY3Rpb24oKXsgdGhpcy5yZW5kZXIoKTsgfSk7XHJcbiAgICB9LFxyXG5cclxuICAgIHJlcXVlc3RSZW5kZXI6IGZ1bmN0aW9uKCkge1xyXG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICAgIHNlbGYucmVuZGVyKCk7XHJcbiAgICAgIHNlbGYuaXNCdXN5ID0gZmFsc2U7XHJcbiAgICB9LFxyXG4gICAgZGVzdHJveTogZnVuY3Rpb24oZWwpe1xyXG4gICAgICB2YXIgaSxcclxuICAgICAgICAgIHBhcmFsbGF4RWxlbWVudCA9ICQoZWwpLmRhdGEoJ3B4LnBhcmFsbGF4Jyk7XHJcbiAgICAgIHBhcmFsbGF4RWxlbWVudC4kbWlycm9yLnJlbW92ZSgpO1xyXG4gICAgICBmb3IoaT0wOyBpIDwgdGhpcy5zbGlkZXJzLmxlbmd0aDsgaSs9MSl7XHJcbiAgICAgICAgaWYodGhpcy5zbGlkZXJzW2ldID09IHBhcmFsbGF4RWxlbWVudCl7XHJcbiAgICAgICAgICB0aGlzLnNsaWRlcnMuc3BsaWNlKGksIDEpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICAkKGVsKS5kYXRhKCdweC5wYXJhbGxheCcsIGZhbHNlKTtcclxuICAgICAgaWYodGhpcy5zbGlkZXJzLmxlbmd0aCA9PT0gMCl7XHJcbiAgICAgICAgJCh3aW5kb3cpLm9mZignc2Nyb2xsLnB4LnBhcmFsbGF4IHJlc2l6ZS5weC5wYXJhbGxheCBsb2FkLnB4LnBhcmFsbGF4Jyk7XHJcbiAgICAgICAgdGhpcy5pc1JlYWR5ID0gZmFsc2U7XHJcbiAgICAgICAgUGFyYWxsYXguaXNTZXR1cCA9IGZhbHNlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfSk7XHJcblxyXG5cclxuICAvLyBQYXJhbGxheCBQbHVnaW4gRGVmaW5pdGlvblxyXG5cclxuICBmdW5jdGlvbiBQbHVnaW4ob3B0aW9uKSB7XHJcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcclxuICAgICAgdmFyICR0aGlzID0gJCh0aGlzKTtcclxuICAgICAgdmFyIG9wdGlvbnMgPSB0eXBlb2Ygb3B0aW9uID09ICdvYmplY3QnICYmIG9wdGlvbjtcclxuXHJcbiAgICAgIGlmICh0aGlzID09IHdpbmRvdyB8fCB0aGlzID09IGRvY3VtZW50IHx8ICR0aGlzLmlzKCdib2R5JykpIHtcclxuICAgICAgICBQYXJhbGxheC5jb25maWd1cmUob3B0aW9ucyk7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSBpZiAoISR0aGlzLmRhdGEoJ3B4LnBhcmFsbGF4JykpIHtcclxuICAgICAgICBvcHRpb25zID0gJC5leHRlbmQoe30sICR0aGlzLmRhdGEoKSwgb3B0aW9ucyk7XHJcbiAgICAgICAgJHRoaXMuZGF0YSgncHgucGFyYWxsYXgnLCBuZXcgUGFyYWxsYXgodGhpcywgb3B0aW9ucykpO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2UgaWYgKHR5cGVvZiBvcHRpb24gPT0gJ29iamVjdCcpXHJcbiAgICAgIHtcclxuICAgICAgICAkLmV4dGVuZCgkdGhpcy5kYXRhKCdweC5wYXJhbGxheCcpLCBvcHRpb25zKTtcclxuICAgICAgfVxyXG4gICAgICBpZiAodHlwZW9mIG9wdGlvbiA9PSAnc3RyaW5nJykge1xyXG4gICAgICAgIGlmKG9wdGlvbiA9PSAnZGVzdHJveScpe1xyXG4gICAgICAgICAgICBQYXJhbGxheC5kZXN0cm95KHRoaXMpO1xyXG4gICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgUGFyYWxsYXhbb3B0aW9uXSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICB2YXIgb2xkID0gJC5mbi5wYXJhbGxheDtcclxuXHJcbiAgJC5mbi5wYXJhbGxheCAgICAgICAgICAgICA9IFBsdWdpbjtcclxuICAkLmZuLnBhcmFsbGF4LkNvbnN0cnVjdG9yID0gUGFyYWxsYXg7XHJcblxyXG5cclxuICAvLyBQYXJhbGxheCBObyBDb25mbGljdFxyXG5cclxuICAkLmZuLnBhcmFsbGF4Lm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAkLmZuLnBhcmFsbGF4ID0gb2xkO1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfTtcclxuXHJcblxyXG4gIC8vIFBhcmFsbGF4IERhdGEtQVBJXHJcblxyXG4gICQoIGZ1bmN0aW9uICgpIHsgXHJcbiAgICAkKCdbZGF0YS1wYXJhbGxheD1cInNjcm9sbFwiXScpLnBhcmFsbGF4KCk7IFxyXG4gIH0pO1xyXG5cclxufShqUXVlcnksIHdpbmRvdywgZG9jdW1lbnQpKTtcclxuIl0sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUFFLFdBQVdBLENBQUMsRUFBRUMsTUFBTSxFQUFFQyxRQUFRLEVBQUVDLFNBQVMs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RTtRQUMxRFYsUUFBUSxDQUFDd0csU0FBUyxDQUFDdEcsT0FBTyxDQUFDO01BQzdCLENBQUMsTUFDSSxJQUFJLENBQUNrSCxLQUFLLENBQUNOLElBQUksQ0FBQyxhQUFhLENBQUMsRUFBRTtRQUNuQzVHLE9BQU8sR0FBR3RCLENBQUMsQ0FBQzJCLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRTZHLEtBQUssQ0FBQ04sSUFBSSxDQUFDLENBQUMsRUFBRTVHLE9BQU8sQ0FBQztRQUM3Q2tILEtBQUssQ0FBQ04sSUFBSSxDQUFDLGFBQWEsRUFBRSxJQUFJOUcsUUFBUSxDQUFDLElBQUksRUFBRUUsT0FBTyxDQUFDLENBQUM7TUFDeEQsQ0FBQyxNQUNJLElBQUlFLE9BQUEsQ0FBTytHLE1BQU0sS0FBSSxRQUFRLEVBQ2xDO1FBQ0V2SSxDQUFDLENBQUMyQixNQUFNLENBQUM2RyxLQUFLLENBQUNOLElBQUksQ0FBQyxhQUFhLENBQUMsRUFBRTVHLE9BQU8sQ0FBQztNQUM5QztNQUNBLElBQUksT0FBT2lILE1BQU0sSUFBSSxRQUFRLEVBQUU7UUFDN0IsSUFBR0EsTUFBTSxJQUFJLFNBQVMsRUFBQztVQUNuQm5ILFFBQVEsQ0FBQzBHLE9BQU8sQ0FBQyxJQUFJLENBQUM7UUFDMUIsQ0FBQyxNQUFJO1VBQ0gxRyxRQUFRLENBQUNtSCxNQUFNLENBQUMsQ0FBQyxDQUFDO1FBQ3BCO01BQ0Y7SUFDRixDQUFDLENBQUM7RUFDSjtFQUVBLElBQUlFLEdBQUcsR0FBR3pJLENBQUMsQ0FBQzBJLEVBQUUsQ0FBQ0MsUUFBUTtFQUV2QjNJLENBQUMsQ0FBQzBJLEVBQUUsQ0FBQ0MsUUFBUSxHQUFlTCxNQUFNO0VBQ2xDdEksQ0FBQyxDQUFDMEksRUFBRSxDQUFDQyxRQUFRLENBQUNDLFdBQVcsR0FBR3hILFFBQVE7O0VBR3BDOztFQUVBcEIsQ0FBQyxDQUFDMEksRUFBRSxDQUFDQyxRQUFRLENBQUNFLFVBQVUsR0FBRyxZQUFZO0lBQ3JDN0ksQ0FBQyxDQUFDMEksRUFBRSxDQUFDQyxRQUFRLEdBQUdGLEdBQUc7SUFDbkIsT0FBTyxJQUFJO0VBQ2IsQ0FBQzs7RUFHRDs7RUFFQXpJLENBQUMsQ0FBRSxZQUFZO0lBQ2JBLENBQUMsQ0FBQywwQkFBMEIsQ0FBQyxDQUFDMkksUUFBUSxDQUFDLENBQUM7RUFDMUMsQ0FBQyxDQUFDO0FBRUosQ0FBQyxFQUFDRyxNQUFNLEVBQUU3SSxNQUFNLEVBQUVDLFFBQVEsQ0FBQyIsImlnbm9yZUxpc3QiOltdLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvcGFyYWxsYXguanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/js/parallax.js\n");

/***/ }),

/***/ "./resources/js/quotation_wizard_func.js":
/*!***********************************************!*\
  !*** ./resources/js/quotation_wizard_func.js ***!
  \***********************************************/
/***/ (() => {

eval("/*  Wizard which method to send the email */\njQuery(function ($) {\n  \"use strict\";\n\n  // Chose here which method to send the email, available:\n  // Phpmaimer text/html > phpmailer/quotation_phpmailer.php\n  // Phpmaimer text/html SMPT > phpmailer/quotation_phpmailer_smtp.php\n  // PHPmailer with html template > phpmailer/quotation_phpmailer_template.php\n  // PHPmailer with html template SMTP> phpmailer/quotation_phpmailer_template_smtp.php\n  // $('form#wrapped').attr('action', 'phpmailer/quotation_phpmailer_template.php');\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJqUXVlcnkiLCIkIl0sInNvdXJjZXMiOlsid2VicGFjazovLy8uL3Jlc291cmNlcy9qcy9xdW90YXRpb25fd2l6YXJkX2Z1bmMuanM/YmEyNSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiAgV2l6YXJkIHdoaWNoIG1ldGhvZCB0byBzZW5kIHRoZSBlbWFpbCAqL1xyXG5cdGpRdWVyeShmdW5jdGlvbiAoJCkge1xyXG5cdFx0XCJ1c2Ugc3RyaWN0XCI7XHJcblx0XHQvLyBDaG9zZSBoZXJlIHdoaWNoIG1ldGhvZCB0byBzZW5kIHRoZSBlbWFpbCwgYXZhaWxhYmxlOlxyXG5cdFx0Ly8gUGhwbWFpbWVyIHRleHQvaHRtbCA+IHBocG1haWxlci9xdW90YXRpb25fcGhwbWFpbGVyLnBocFxyXG5cdFx0Ly8gUGhwbWFpbWVyIHRleHQvaHRtbCBTTVBUID4gcGhwbWFpbGVyL3F1b3RhdGlvbl9waHBtYWlsZXJfc210cC5waHBcclxuXHRcdC8vIFBIUG1haWxlciB3aXRoIGh0bWwgdGVtcGxhdGUgPiBwaHBtYWlsZXIvcXVvdGF0aW9uX3BocG1haWxlcl90ZW1wbGF0ZS5waHBcclxuXHRcdC8vIFBIUG1haWxlciB3aXRoIGh0bWwgdGVtcGxhdGUgU01UUD4gcGhwbWFpbGVyL3F1b3RhdGlvbl9waHBtYWlsZXJfdGVtcGxhdGVfc210cC5waHBcclxuXHRcdC8vICQoJ2Zvcm0jd3JhcHBlZCcpLmF0dHIoJ2FjdGlvbicsICdwaHBtYWlsZXIvcXVvdGF0aW9uX3BocG1haWxlcl90ZW1wbGF0ZS5waHAnKTtcclxuXHR9KTtcclxuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNDQSxNQUFNLENBQUMsVUFBVUMsQ0FBQyxFQUFFO0VBQ25CLFlBQVk7O0VBQ1o7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0FBQ0QsQ0FBQyxDQUFDIiwiaWdub3JlTGlzdCI6W10sImZpbGUiOiIuL3Jlc291cmNlcy9qcy9xdW90YXRpb25fd2l6YXJkX2Z1bmMuanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/js/quotation_wizard_func.js\n");

/***/ }),

/***/ "./resources/js/registration_wizard_func.js":
/*!**************************************************!*\
  !*** ./resources/js/registration_wizard_func.js ***!
  \**************************************************/
/***/ (() => {

eval("/*  Wizard */\njQuery(function ($) {\n  \"use strict\";\n\n  // Chose here which method to send the email, available:\n  // Phpmaimer text/html > phpmailer/registration_phpmailer.php\n  // Phpmaimer text/html SMPT > phpmailer/registration_phpmailer_smtp.php\n  // PHPmailer with html template > phpmailer/registration_phpmailer_template.php\n  // PHPmailer with html template SMTP> phpmailer/registration_phpmailer_template_smtp.php\n  // $('form#wrapped').attr('action', 'phpmailer/registration_phpmailer_template.php');\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJqUXVlcnkiLCIkIl0sInNvdXJjZXMiOlsid2VicGFjazovLy8uL3Jlc291cmNlcy9qcy9yZWdpc3RyYXRpb25fd2l6YXJkX2Z1bmMuanM/YjI5ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcdC8qICBXaXphcmQgKi9cclxuXHRqUXVlcnkoZnVuY3Rpb24gKCQpIHtcclxuXHRcdFwidXNlIHN0cmljdFwiO1xyXG5cdFx0Ly8gQ2hvc2UgaGVyZSB3aGljaCBtZXRob2QgdG8gc2VuZCB0aGUgZW1haWwsIGF2YWlsYWJsZTpcclxuXHRcdC8vIFBocG1haW1lciB0ZXh0L2h0bWwgPiBwaHBtYWlsZXIvcmVnaXN0cmF0aW9uX3BocG1haWxlci5waHBcclxuXHRcdC8vIFBocG1haW1lciB0ZXh0L2h0bWwgU01QVCA+IHBocG1haWxlci9yZWdpc3RyYXRpb25fcGhwbWFpbGVyX3NtdHAucGhwXHJcblx0XHQvLyBQSFBtYWlsZXIgd2l0aCBodG1sIHRlbXBsYXRlID4gcGhwbWFpbGVyL3JlZ2lzdHJhdGlvbl9waHBtYWlsZXJfdGVtcGxhdGUucGhwXHJcblx0XHQvLyBQSFBtYWlsZXIgd2l0aCBodG1sIHRlbXBsYXRlIFNNVFA+IHBocG1haWxlci9yZWdpc3RyYXRpb25fcGhwbWFpbGVyX3RlbXBsYXRlX3NtdHAucGhwXHJcblx0XHQvLyAkKCdmb3JtI3dyYXBwZWQnKS5hdHRyKCdhY3Rpb24nLCAncGhwbWFpbGVyL3JlZ2lzdHJhdGlvbl9waHBtYWlsZXJfdGVtcGxhdGUucGhwJyk7XHJcblx0fSk7XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUM7QUFDQUEsTUFBTSxDQUFDLFVBQVVDLENBQUMsRUFBRTtFQUNuQixZQUFZOztFQUNaO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtBQUNELENBQUMsQ0FBQyIsImlnbm9yZUxpc3QiOltdLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvcmVnaXN0cmF0aW9uX3dpemFyZF9mdW5jLmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/js/registration_wizard_func.js\n");

/***/ }),

/***/ "./resources/js/reservation_wizard_func.js":
/*!*************************************************!*\
  !*** ./resources/js/reservation_wizard_func.js ***!
  \*************************************************/
/***/ (() => {

eval("/*  Wizard */\njQuery(function ($) {\n  \"use strict\";\n\n  // Chose here which method to send the email, available:\n  // Phpmaimer text/html > phpmailer/reservation_phpmailer.php\n  // Phpmaimer text/html SMPT > phpmailer/reservation_phpmailer_smtp.php\n  // PHPmailer with html template > phpmailer/reservation_phpmailer_template.php\n  // PHPmailer with html template SMTP> phpmailer/reservation_phpmailer_template_smtp.php\n  // $('form#wrapped').attr('action', 'phpmailer/reservation_phpmailer_template.php');\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJqUXVlcnkiLCIkIl0sInNvdXJjZXMiOlsid2VicGFjazovLy8uL3Jlc291cmNlcy9qcy9yZXNlcnZhdGlvbl93aXphcmRfZnVuYy5qcz8yYTdmIl0sInNvdXJjZXNDb250ZW50IjpbIlx0LyogIFdpemFyZCAqL1xyXG5cdGpRdWVyeShmdW5jdGlvbiAoJCkge1xyXG5cdFx0XCJ1c2Ugc3RyaWN0XCI7XHJcblx0XHQvLyBDaG9zZSBoZXJlIHdoaWNoIG1ldGhvZCB0byBzZW5kIHRoZSBlbWFpbCwgYXZhaWxhYmxlOlxyXG5cdFx0Ly8gUGhwbWFpbWVyIHRleHQvaHRtbCA+IHBocG1haWxlci9yZXNlcnZhdGlvbl9waHBtYWlsZXIucGhwXHJcblx0XHQvLyBQaHBtYWltZXIgdGV4dC9odG1sIFNNUFQgPiBwaHBtYWlsZXIvcmVzZXJ2YXRpb25fcGhwbWFpbGVyX3NtdHAucGhwXHJcblx0XHQvLyBQSFBtYWlsZXIgd2l0aCBodG1sIHRlbXBsYXRlID4gcGhwbWFpbGVyL3Jlc2VydmF0aW9uX3BocG1haWxlcl90ZW1wbGF0ZS5waHBcclxuXHRcdC8vIFBIUG1haWxlciB3aXRoIGh0bWwgdGVtcGxhdGUgU01UUD4gcGhwbWFpbGVyL3Jlc2VydmF0aW9uX3BocG1haWxlcl90ZW1wbGF0ZV9zbXRwLnBocFxyXG5cdFx0Ly8gJCgnZm9ybSN3cmFwcGVkJykuYXR0cignYWN0aW9uJywgJ3BocG1haWxlci9yZXNlcnZhdGlvbl9waHBtYWlsZXJfdGVtcGxhdGUucGhwJyk7XHJcblx0fSk7XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUM7QUFDQUEsTUFBTSxDQUFDLFVBQVVDLENBQUMsRUFBRTtFQUNuQixZQUFZOztFQUNaO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtBQUNELENBQUMsQ0FBQyIsImlnbm9yZUxpc3QiOltdLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvcmVzZXJ2YXRpb25fd2l6YXJkX2Z1bmMuanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/js/reservation_wizard_func.js\n");

/***/ }),

/***/ "./resources/js/review_wizard_func.js":
/*!********************************************!*\
  !*** ./resources/js/review_wizard_func.js ***!
  \********************************************/
/***/ (() => {

eval("/*  Wizard */\njQuery(function ($) {\n  \"use strict\";\n\n  // Chose here which method to send the email, available:\n  // Phpmaimer text/html > phpmailer/review_phpmailer.php\n  // Phpmaimer text/html SMPT > phpmailer/review_phpmailer_smtp.php\n  // PHPmailer with html template > phpmailer/review_phpmailer_template.php\n  // PHPmailer with html template SMTP> phpmailer/review_phpmailer_template_smtp.php\n  // $('form#wrapped').attr('action', 'phpmailer/review_phpmailer_template.php');\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJqUXVlcnkiLCIkIl0sInNvdXJjZXMiOlsid2VicGFjazovLy8uL3Jlc291cmNlcy9qcy9yZXZpZXdfd2l6YXJkX2Z1bmMuanM/ZjJkYyJdLCJzb3VyY2VzQ29udGVudCI6WyJcdC8qICBXaXphcmQgKi9cclxuXHRqUXVlcnkoZnVuY3Rpb24gKCQpIHtcclxuXHRcdFwidXNlIHN0cmljdFwiO1xyXG5cdFx0Ly8gQ2hvc2UgaGVyZSB3aGljaCBtZXRob2QgdG8gc2VuZCB0aGUgZW1haWwsIGF2YWlsYWJsZTpcclxuXHRcdC8vIFBocG1haW1lciB0ZXh0L2h0bWwgPiBwaHBtYWlsZXIvcmV2aWV3X3BocG1haWxlci5waHBcclxuXHRcdC8vIFBocG1haW1lciB0ZXh0L2h0bWwgU01QVCA+IHBocG1haWxlci9yZXZpZXdfcGhwbWFpbGVyX3NtdHAucGhwXHJcblx0XHQvLyBQSFBtYWlsZXIgd2l0aCBodG1sIHRlbXBsYXRlID4gcGhwbWFpbGVyL3Jldmlld19waHBtYWlsZXJfdGVtcGxhdGUucGhwXHJcblx0XHQvLyBQSFBtYWlsZXIgd2l0aCBodG1sIHRlbXBsYXRlIFNNVFA+IHBocG1haWxlci9yZXZpZXdfcGhwbWFpbGVyX3RlbXBsYXRlX3NtdHAucGhwXHJcblx0XHQvLyAkKCdmb3JtI3dyYXBwZWQnKS5hdHRyKCdhY3Rpb24nLCAncGhwbWFpbGVyL3Jldmlld19waHBtYWlsZXJfdGVtcGxhdGUucGhwJyk7XHJcblx0fSk7XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUM7QUFDQUEsTUFBTSxDQUFDLFVBQVVDLENBQUMsRUFBRTtFQUNuQixZQUFZOztFQUNaO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtBQUNELENBQUMsQ0FBQyIsImlnbm9yZUxpc3QiOltdLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvcmV2aWV3X3dpemFyZF9mdW5jLmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/js/review_wizard_func.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	__webpack_modules__["./resources/js/reservation_wizard_func.js"]();
/******/ 	__webpack_modules__["./resources/js/daterangepicker_func.js"]();
/******/ 	__webpack_modules__["./resources/js/quotation_wizard_func.js"]();
/******/ 	__webpack_modules__["./resources/js/registration_wizard_func.js"]();
/******/ 	__webpack_modules__["./resources/js/autocomplete_func.js"]();
/******/ 	__webpack_modules__["./resources/js/review_wizard_func.js"]();
/******/ 	__webpack_modules__["./resources/js/parallax.js"]();
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/js/owl-carousel.js"]();
/******/ 	
/******/ })()
;